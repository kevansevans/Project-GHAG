Class GHAGEventHandler : EventHandler
{
	Gardevoir Gardie;
	
	int shinyodds;
	
	bool mapHasMinimalSecrets;
	
	bool plasmaspawned;
	
	override void WorldThingSpawned(WorldEvent event)
	{
		if (Gardevoir(event.thing)) {
			gardie = Gardevoir(event.thing);
			return;
		}
										//Nazis don't get to be shiny
		if (Actor(event.thing).bIsMonster && !WolfensteinSS(event.thing) && !event.thing.bFriendly)
		{
			if (shinyodds == 0) shinyodds = 4096;
			int rng = random(1, shinyodds);
			if (rng == shinyodds / 2 || shinyodds == 1) 
			{
				GHAGEventHandler.SetShinyDemon(event.thing);
			}
			return;
		}
		
		if (Health(event.thing)) {
				
			let healItem = Health(event.thing);
			if (healItem.maxAmount < 350) {
				healItem.MaxAmount = 350;
			} else {
				healItem.MaxAmount = Int(healItem.MaxAmount * 1.75);
			}
			if(healItem.Amount >= 100) {
				healItem.Amount = Int(healItem.Amount * 1.75);
			}
			return;
		}
		
		if (event.thing is "Weapon")
		{
			let gun = Weapon(event.thing);
			if (!gun) return;
			
			//Ignore any spawning GHAG weapons
			if (GHAGPistol(gun) || GHAGShotgun(gun) || GHAGRocketLauncher(gun) || GHAGPlasmaRifle(gun) || GHAGPsychoCutter(gun))
			{
				return;
			}
			
			switch(gardie.iwadClass)
			{
				case 0:
					if (gun is "Gauntlets") 
					{
						gun.spawn("ExtraPsychoCutter", gun.pos);
						gun.destroy();
						return;
					}
					if (gun is "CrossBow") 
					{
						gun.spawn("GHAGShellBox", gun.pos);
						gun.destroy();
						return;
					}
					if (gun is "Blaster")
					{
						gun.spawn("GHAGBulletBox", gun.pos);
						gun.destroy();
						return;
					}
					if (gun is "Mace")
					{
						gun.spawn("GHAGRocketBox", gun.pos);
						gun.destroy();
						return;
					}
					if (gun is "PhoenixRod" || gun is "SkullRod")
					{
						gun.spawn("GHAGCellPack", gun.pos);
						gun.destroy();
						return;
					}
					break;
			}
			
			//Agnostic weapon type check
			if (gun.AmmoType1)
			{
				string ammoType = getWeaponClass(gun.AmmoType1.getClassName());
				if (ammoType != "NullAmmoType")
				{
					let munition = Ammo(gun.spawn(ammoType, gun.pos));
					if (munition) 
					{
						munition.amount = gun.AmmoGive1;
					}
					gun.destroy();
					return;
				}
			}
		}
		
		if (Ammo(event.thing))
		{
			let bullets = Ammo(Event.Thing);
			
			switch (gardie.iwadClass)
			{
				case 0:
					if (bullets is "GoldWandAmmo")
					{
						bullets.spawn("GHAGMag", bullets.pos);
						bullets.destroy();
						return;
					}
					if (bullets is "GoldWandHefty")
					{
						bullets.spawn("GHAGBulletBox", bullets.pos);
						bullets.destroy();
						return;
					}
					if (bullets is "CrossbowAmmo")
					{
						bullets.spawn("GHAGShell", bullets.pos);
						bullets.destroy();
						return;
					}
					if (bullets is "CrossbowHefty")
					{
						bullets.spawn("GHAGShellBox", bullets.pos);
						bullets.destroy();
						return;
					}
					if (bullets is "BlasterAmmo")
					{
						bullets.spawn("GHAGMag", bullets.pos);
						bullets.destroy();
						return;
					}
					if (bullets is "BlasterHefty")
					{
						bullets.spawn("GHAGBulletBox", bullets.pos);
						bullets.destroy();
						return;
					}
					break;
			}
		}
	}
	
	string getWeaponClass(String _type)
	{
		if (_type == "Clip") return "GHAGBulletBox";
		if (_type == "Shell") return "GHAGShellBox";
		if (_type == "RocketAmmo") return "GHAGRocketBox";
		if (_type == "Cell") return "GHAGCellPack";
	
		return "NullAmmoType";
	}
	
	static void SetShinyDemon(Actor thing)
	{
		let shinything = Actor(thing);
		if (!shinything) return;
		
		//ActorTracker.TrackThing(thing, SHINY);
		
		if (Zombieman(shinything)) 
		{
			shinything.A_SetTranslation("ShinyZombie");
			return;
		}
		
		if (ShotgunGuy(shinything))
		{
			shinything.A_SetTranslation("ShinyShotgun");
			return;
		}
		
		if (ChaingunGuy(shinything))
		{
			shinything.A_SetTranslation("ShinyChaingun");
			return;
		}
		
		if (DoomImp(shinything))
		{
			shinything.A_SetTranslation("ShinyImp");
			return;
		}
		
		if (Demon(shinything)) 
		{
			shinything.A_SetTranslation("ShinyDemon");
			return;
		}
				
		if (HellKnight(shinything))
		{
			shinything.A_SetTranslation("ShinyKnight");
			return;
		}
		
		if (BaronOfHell(shinything))
		{
			shinything.A_SetTranslation("ShinyBaron");
			return;
		}
		
		if (Arachnotron(shinything))
		{
			shinything.A_SetTranslation("ShinySpidey");
			return;
		}
		
		if (Revenant(shinything))
		{
			shinything.A_SetTranslation("ShinyBoner");
			return;
		}
		
		if (Cacodemon(shinything))
		{
			shinything.A_SetTranslation("ShinyCaco");
			return;
		}
		
		if (LostSoul(shinything))
		{
			shinything.A_SetTranslation("ShinySoul");
			return;
		}
		
		if (PainElemental(shinything))
		{
			shinything.A_SetTranslation("ShinyPain");
			return;
		}
		
		if (Fatso(shinything))
		{
			shinything.A_SetTranslation("ShinyFatty");
			return;
		}
		
		if (Archvile(shinything))
		{
			shinything.A_SetTranslation("ShinyVile");
			return;
		}
		
		if (Cyberdemon(shinything))
		{
			shinything.A_SetTranslation("ShinyCybie");
			return;
		}
		
		if (SpiderMasterMind(shinything))
		{
			shinything.A_SetTranslation("ShinyMomma");
			return;
		}
		
		
	}

	//Killing an enemy will reset the anger delay timer.
	override void WorldThingDied(WorldEvent event) 
	{
		if (!gardie) return;
		if (ExplosiveBarrel(event.thing)) return;
		if (Gardevoir(event.thing.target) || ExplosiveBarrel(event.thing.target)) {
			CatharsisBonus(event.thing);
		}
	}
	
	void CatharsisBonus(Actor thing) 
	{
		if (!thing) return;
		
		let gardie = Gardevoir(players[consoleplayer].mo);
		if (!gardie) return;
		
		int angerBonus = Max(int(thing.spawnHealth() / 5), 1);
		int willBonus = int(AngerBonus / 10);
		
		if (gardie.player.ReadyWeapon is "IcePunch" ||
			gardie.player.ReadyWeapon is "Swift"		 ||
			gardie.player.ReadyWeapon is "MoonBlastGun") 
		{ } else {
		
			if (WolfensteinSS(thing)) angerbonus = 3000;
			
			while (true) 
			{
				let rageitem = RageEssence(thing.A_DropItem("RageEssence", 1));
				rageitem.A_SetPitch(random(60, 80));
				rageitem.A_SetAngle(random(1, 360));
				
				if (WolfensteinSS(thing)) 
				{
					rageitem.amount = 100;
					rageitem.A_SetScale(1, 1);
					angerbonus -= 100;
					rageitem.A_ChangeVelocity(random(-4, 4), random(-4, 4), random(-4, 4), CVF_REPLACE);
					rageitem.A_SetPitch(random(80, 120));
					if (angerbonus <= 0) break;
					else continue;
				}
				
				rageitem.A_ChangeVelocity(random(-2, 2), random(-2, 2), random(-2, 2), CVF_REPLACE);
				
				if (angerbonus >= 1000) 
				{
					rageitem.amount = 500;
					rageitem.A_SetScale(3, 3);
					angerbonus -= 500;
				} 
				else if (angerbonus >= 500)
				{
					rageitem.amount = 250;
					rageitem.A_SetScale(2, 2);
					angerbonus -= 250;
				}
				else if (angerbonus >= 250)
				{
					rageitem.amount = 100;
					rageitem.A_SetScale(1.5, 1.5);
					angerbonus -= 100;
				} 
				else if (angerbonus >= 50)
				{
					rageitem.amount = 50;
					rageitem.A_SetScale(1, 1);
					angerbonus -= 50;
				}
				else if (angerbonus >= 5)
				{
					rageitem.amount = 5;
					rageitem.A_SetScale(0.5, 0.5);
					angerbonus -= 5;
				}
				else if (angerbonus <= 5)
				{
					rageitem.amount = angerbonus;
					rageitem.A_SetScale(0.5, 0.5);
					break;
				}
			}
			
		}
		
		if (willBonus > 0) {
			let healitem = HealEssence(thing.A_DropItem("HealEssence", 1));
			healitem.amount = willBonus;
			if (WolfensteinSS(thing)) healitem.amount = 350;
			healitem.A_ChangeVelocity(random(-2, 2), random(-2, 2), random(-2, 2), CVF_REPLACE);
			healitem.A_SetPitch(random(60, 80));
			healitem.A_SetAngle(random(1, 360));
		}
	}
	
	override void worldtick()
	{
		if (gardie)
		{
			//change rage value
			//set to any value aside from -1
			Cvar rage = Cvar.findCvar("ghagrage");
			if (rage) {
				if (rage.getInt() != -1) 
				{
					Gardie.RageValue = rage.getInt();
					rage.resetToDefault();
				}
			}
			
			//change the odds of an element punch inflicting it's status effect
			//set to -1 to reset it to a default of 25
			cvar punchodds = Cvar.findCvar("ghagpunchodds");
			if (punchodds) {
				let odds = InflictOdds.get();
				if (odds) {
					if (punchodds.getInt() != -1)
					{
						odds.chance = punchodds.getInt();
					} else if (odds.chance == -1) {
						odds.chance = 25;
					}
					punchodds.resetToDefault();
				}
			}
			
			//change the odds of a demon spawning as shiny
			cvar c_shinyodds = Cvar.findCvar("shinyodds");
			if (c_shinyodds) {
				if (c_shinyodds.getInt() != -1) {
					shinyodds = c_shinyodds.getInt();
					c_shinyodds.setInt(-1);
				}
			}
			
			/*cvar charon = Cvar.findCvar("ghagcharon");
			if (charon) {
				bool mode = charon.getBool();
				Gardie.charonmode = mode;
			}*/
		}
	}
	
	override void PlayerSpawned(PlayerEvent player) {
	
		Gardie = Gardevoir(players[player.PlayerNumber].mo);
		
		/*int rnd = random(0, 1);
		
		switch (rnd) {
		
			case 0 :
				console.printf("Don't let the dress fool you, I'm a boy, and you'll be calling it a kilt when I'm done with you");
				break;
			case 1 :
				console.printf("Get ready, wake your psyche up! Get ready, dig your anger up!");
				break;
		}*/
	}
	
	override void WorldLinePreActivated (WorldEvent event) 
	{
		if (!gardie) return;
	}
	
	int numSecrets;
	int weaponspawned;
	
	override void WorldLoaded(WorldEvent event)
	{
		numSecrets = 0;
		mapHasMinimalSecrets = true;
		for (int i = 0; i < level.Sectors.Size(); i++)
		{
			if (level.sectors[i].isSecret())
			{
				++numSecrets;
			}
		}
		
		if (numSecrets == 0)
		{
			//Free candybar to make sure anger scales with custom maps
			RageCandyBar(Actor.spawn('RageCandyBar')).touch(gardie);
		}
		else
		{
			for (int i = 0; i < level.Sectors.Size(); i++)
			{
				if (level.sectors[i].isSecret())
				{
					let c = level.Sectors[i].centerspot;
					if (level.IsPointInLevel((c.x, c.y, level.Sectors[i].floorplane.ZAtPoint(c))))
					{
						SpawnBonusItem(c.x, c.y, level.Sectors[i].floorplane.ZAtPoint(c));
					}
				}
			}
		}
		
		//Hehe, first time I've done something properly C like
		if (weaponspawned != level.levelnum) weaponspawned = 0;
	}
	
	void SpawnBonusItem(double _x, double _y, double _z)
	{
		if (level.levelNum <= 1)
		{
			Actor.spawn('RageCandyBar', (_x, _y, _z));
		}
		else
		{
			if (numSecrets <= 2)
			{
				Actor.spawn('RageCandyBar', (_x, _y, _z));
			}
			else
			{
				int limit = GameInfo.GameType == 1 ? 4 : 2;
				int rng = random(1, 10);
				if (rng != 10 || weaponspawned == level.levelNum) Actor.spawn('RageCandyBar', (_x, _y, _z));
				else
				{
					int mod = 1;
					
					int pistolBonus = 0;
					int shottyBonus = 1;
					int plasmaBonus = 2;
					
					if (gardie.countInv('GHAGPistolOverlay') == limit)
					{
						pistolBonus = -1;
						shottyBonus -= 1;
						plasmaBonus -= 1;
					}
					
					if (gardie.countInv('GHAGShotgun')) 
					{
						if (gardie.countInv('GHAGShotgunOverlay') == limit)
						{
							shottyBonus = -1;
							plasmaBonus -= 1;
						} else {
							mod += 1;
						}
					}
					if (gardie.countInv('GHAGPlasmaRifle')) 
					{
						if (gardie.countInv('GHAGPlasmaOverlay') == limit)
						{
							plasmaBonus = -1;
						} else {
							mod += 1;
						}
					}
					
					weaponspawned = level.levelNum;
					if (pistolBonus == -1 && shottyBonus == -1 && plasmaBonus == -1)
					{
						return;
					}
					
					int tries = 0;
					while (true)
					{
						if (tries > 5) //Should be impossible to happen, but just to be safe
						{
							Actor.spawn('RageCandyBar', (_x, _y, _z));
							return;
						}
					
						int bonus = (level.levelNum + tries) % mod;
						
						if (bonus == pistolBonus) {
							Actor.spawn('ExtraPistol', (_x, _y, _z));
							return;
						}
						if (bonus == shottyBonus) {
							Actor.spawn('ExtraShotgun', (_x, _y, _z));
							return;
						}
						if (bonus == plasmaBonus) {
							Actor.spawn('ExtraPlasma', (_x, _y, _z));
							return;
						}
						++tries;
					}			
				}
			}
		}
	}
}

Class DummyActor : Actor
{}