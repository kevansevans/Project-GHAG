Class Gardevoir : PlayerPawn
{
	int RageTimer;
	int RageDelay;
	int RageConstant;
	int RageValue;
	
	int cvarRage;
	property cvarRage: cvarRage;
	
	bool OverTheEdge;
	
	int PunchMode;
	property PunchMode: PunchMode;
	
	property RageValue: RageValue;
	property RageDelay: RageDelay;
	
	array<Actor> HurtList;
	array<Int> HurtTracker;
	
	NameClass names;
	property names: names;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		
		RageValue = 0;
		RageDelay = 35 * 3;
		Ragetimer = 0;
		RageConstant = 1000;
		
		OverTheEdge = false;
		
		PunchMode = 0;
	}
	
	string getRNGName() {
		
		if (!self.names) {
			self.names = NameClass(Spawn("NameClass"));
		}
		return self.names.GetName();
	}
	
	void ResetTrackers() 
	{
		HurtList.clear();
		HurtTracker.clear();
		HurtList.resize(level.Total_Monsters);
		HurtTracker.resize(level.Total_Monsters);
	}
	
	void CatharsisBonus(Actor thing) 
	{
		if (self.health <= 0) return;
		if (!thing) return;
		
		int angerBonus = Max(int(thing.spawnHealth() / 10), 1);
		
		if (HurtList.find(thing) != HurtList.size()) {
			angerBonus += HurtTracker[HurtList.find(thing)];
			HurtTracker[HurtList.find(thing)] = -1;
			HurtList[HurtList.find(thing)] = null;
		}
		
		if (angerBonus <= 1000 && RageValue <= 1000) {
			RageValue += Min(angerBonus, 250);
			RageValue = Min(RageConstant, RageValue);
			int willBonus = int(AngerBonus / 10);
			if (willBonus > 0) {
				let healBonus = Health(Spawn("Health"));
				healBonus.Amount = int(willBonus * 5);
				healBonus.MaxAmount = 500;
				healBonus.Touch(Self);
			}
		} else {
			if (!OverTheEdge) {
				RageValue += angerBonus;
				OverTheEdge = true;
			}
		}
	}
	
	void GetHeckingAngery() 
	{
		RageValue += 20;
		RageTimer = 0;
		return;
	}
	
	void GetLivid()
	{
		RageValue += 500;
	}
	
	double GetRageValue() {
		return RageValue;
	}
	
	double GetRageModifier()
	{
		return GetRageValue() * 0.001;
	}
	
	double GetTicModifier(int tic, bool allowZero = false) 
	{
		double value = tic * (1 - GetRageModifier());
		if (!allowZero) {
			if (value < 1) value = 1;
		}
		value = round(value);
		return Max(value, 0);
	}
	
	double GetDamageModifier(double damage)
	{
		return damage + (damage * GetRageModifier());
	}
	
	double GetAccuracyModifier(double accuracy)
	{
		return min(max(1, accuracy * (1 - GetRageModifier())), 20);
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (RageValue <= RageConstant) {
			//RageValue += damage;
			RageTimer = 0;
			if (RageValue > RageConstant) RageValue = RageConstant;
		}
		
		if (HurtList.find(source) != HurtList.size()) {
			HurtList.push(source);
		}
		if (HurtList.find(source) != HurtList.size()) HurtTracker[HurtList.find(source)] += damage;
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	override void Tick()
	{
		Super.Tick();
		
		int retrievedCvarRage = Cvar.FindCvar('GhagRage').GetInt();
		if (cvarRage !=  retrievedCvarRage) {
			RageValue =  retrievedCvarRage;
			cvarRage =  retrievedCvarRage;
		}
		
		RageTimer++;
		
		if (OverTheEdge && RageValue <= RageConstant) OverTheEdge = false;
		
		if (RageValue > 0 && RageValue <= RageConstant) {
			int delay = 35 * GetRageModifier();
			if (RageTimer > RageDelay) {
				RageValue--;
				RageDelay -= 2;
				if (RageDelay < 35) RageDelay = 35;
				RageTimer = 0;
			}
		} else if (RageValue > RageConstant) {
			int angercap = RageValue / RageConstant;
			if (RageTimer > 5) {
				RageValue -= (2 * angercap);
				RageTimer = 0;
			}
		}
		
		//A_Print("" .. RageValue .. ":" .. GetRageModifier());
	}	
	
	default {
		Health 350;
        Player.DisplayName "Gardevoir" ;
		Player.StartItem "GHAGPistol";
		Player.StartItem "ElementPunch";
		Player.StartItem "Swift";
		Player.StartItem "Clip", 50;
		Player.MaxHealth 350;
     }
}

Class NameClass : Actor
{

	int getMode;
	int wordtracker;
	
	property getMode: getMode;
	property wordtracker: WordTracker;
	property names: names;
	
	default 
	{
		
		NameClass.getMode 0;
		NameClass.wordTracker 0;

	}
	
	//Your name here? Hit me up!
	static const string names[] =
	{
		"Joey", "Billy", "Kevy", "Kablooey", "Pill", "Martha", "Rachael", "Weasel", "Nash", "Emma",
		"April", "Ghost", "Kekz", "Bob", "Jimmy", "Cali", "Kesha", "Gutawer", "Marisa", "Hugo",
		"Romero", "Carmack", "Adrian", "Tom", "Sandy", "American", "Kid Mystic", "Trouble", "Peace Keeper",
		"Chocolate Thunder", "Vanilla Thunder", "Strawberry Thunder", "Pomegranate Fury", "Fuck you in particular",
		"Death from above", "Oh shit, he", "ASSHAT", "ASSCLOWN", "ASSFART", "RED", "BLUE", "GREEN", "YELLOW", "GOLD", "SILVER",
		"CRYSTAL", "Prof. Oak", "Prof. Elm", "Prof. Birch", "Prof. Rowan", "Prof. Juniper", "Prof. Sycamore", 
		"Prof. Kukui", "Prof. Magnolia", "RUBY", "SAPPHIRE", "EMERALD", "DIAMOND", "PEARL", "PLATINUM", "BLACK", 
		"WHITE", "X", "Y", "SWORD", "SHIELD", "Explosive Diplomacy", "Diplomacy", "Zero Diplomacy", "Fuck you, Baltimore!",
		"Zabivaka, no!", "BASTARD!", "I AM CALM!", "Crocket", "Screaming Eagles!", "The Original", "Stanley",
		"Pikachu", "Shirely", "Surely", "Flynn", "Dacote", "Problem Solver", "Problem Causer", "9K38 Igla", "Bitterman",
		"Rocket", "Rocket No. 524", "Rocky", "Rocky Road", "Rocky Horror", "Not a shiny", "Wonder-trade me", "Fiddlyfaddlybiddlybaddlydiddlydoodlyhiddlyhoodly",
		"Problem Maker", "Problem Deleter", "Kibbles n' bits", "Howler Head", "Dr. Pepper", "Not Safe For Self Propulsion",
		"Safe For Self Propulsion", "Death Bringer", "Funny Name", "Funny Name Here", "Made you look", "Made you explode",
		"ZScript was a mistake", "AEUHHH????", "[No]", "[Added]", "[Already In]", "[DIY]", "[Duplicate]", "[Not Needed]",
		"[Closed]", "[???!?!?!?!????]", "Icon Killer", "This one's for Daisy", "Bottled Up Rage", "Explosive Personality",
		"Explosive Diarrhea", "Bottled Up Rage", "Can of Whoop Ass", "What", "Sin Killer", "MERCILESS EXTERMINATION",
		"SPEEEN", "Merry Christmas", "Apple!", "Hey!", "Apple, hey Apple!", "Adios", "Busting makes me feel good!",
		"Ok I Love You Bye Bye", "Not funny, didn't laugh", "Frag out", "Fire in the hole!", "50 Shades of Explode",
		"50 Shades of you're dead", "50 shades of gibitude", "50 shades of death", "ZoomyPop", "Zoomie Boomies",
		"Congrats! You've won!", "NOT THE BEES!", '"Dildo Joke Here"', "Help I'm trapped in a rocket factory!",
		"Sit down, That means you Billy!", "Lil' smokey", "Ayy Pappie!", "Sparky", "Charging Charlie",
		"Mister Roger's Middle Finger", "Fandango", "The Rectifier", "Buelah", "Chumlee", "Butterface", "Gone Fission",
		"Not your dad's colonoscopy", "Bitch Slap", "The Dreaded CONE", "Bloop", "Muzzle Maggot", "Track Trolls",
		"Breach Creature", "Bore Baby", "Novacaine", "Karma", "Karma Bringer", "Wake Up Call", "Hey! Listen!",
		"I like shorts!", "Hot explosives in your area!", "Happy Accident", "Chaos... Control!", "Chaos... Swiss Roll!",
		"Creeper", "Shoutout to Simpleflips", "Lamb sauce located", "Target Acquired", "Eightball", "Going out with a bang!",
		"Liam", "Olivia", "Noah", "Oliver", "Ava", "Elijah", "Charlotte", "William", "Sophia", "James", "Jesse", "Amelia",
		"Benjamin", "Isabella", "Lucas", "Mia", "Henry", "Evelyn", "Alexander", "Harper", "Bojack", "Princess", "Nguyen",
		"Todd", "Neal McBeal", "Margo Martindale", "Peanut Butter", "Hollyhock", "Judah", "Surprise!", "PK Rocket!",
		"PSY Rocket!", " The perfect gift", "Imp Encounter", "300mb!", "Dud", "Objection!", "Hold it!", "Take that!",
		"Silence!", "Perfect IV", "Laser!", "Caution!", "Goodnight Everybody!", "Helloooooo Nurse!"
	};

	static const string navyseal[] = {
		"the", "fuck", "did", "you", "just", "fucking", "say", "about", "me,", "you", "little", "bitch?"
	};
	
	static const string awman[] = {
		"Ah man", "So", "way", "back", "in", "the", "mine,", "got", "our", "pickaxe", "swingin'", "from", "side", "to", "side!"
	};
	
	static const string shorts[] = {
		"They're comfy", "And easy to wear!"
	};
	
	string GetName() {
		
		string rng_name = '[I am error]';
		
		switch (getMode)
		{
			case 0:
				rng_name = NameClass.names[random(0, NameClass.names.size() - 1)];
				if (rng_name == "What") getMode = 1;
				if (rng_name == "Creeper") getMode = 2;
				if (rng_name == "I like shorts!") getMode = 3;
				break;
			case 1:
				rng_name = NameClass.navyseal[wordtracker];
				wordtracker += 1;
				if (rng_name == "bitch?") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 2:
				rng_name = NameClass.awman[wordtracker];
				wordtracker += 1;
				if (rng_name == "side!") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 3:
				rng_name = NameClass.shorts[wordtracker];
				wordtracker += 1;
				if (rng_name == "And easy to wear!") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
		}
		
		return rng_name;
	}
}