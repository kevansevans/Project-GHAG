Class Thunderbolt : PokemonMove
{
	Default
	{
		Weapon.Slotnumber 3;
	}
	
	States
	{
		Select:
			HAND A 1 A_Raise();
			Loop;
		Deselect:
			HAND A 1 A_Lower();
			Loop;
		Ready:
			HAND A 1 A_WeaponReady(WRF_ALLOWUSER1);
			Loop;
		Fire:
			TNT1 A 0 A_StartSound("Attack/Thunder", CHAN_AUTO);
			HAND A 1 A_Thunderbolt();
			HAND BCDE 1;
			HAND A 10;
			TNT1 A 0 A_Refire();
			Goto Ready;
	}
	
	Action Void A_Thunderbolt()
	{
		FLineTraceData shot;
		bool hit = Gardevoir(self).LineTrace(Gardevoir(self).angle, 4096, Gardevoir(self).pitch, TRF_THRUBLOCK | TRF_NOSKY, Gardevoir(self).height - 12, 0, 0, shot);
		if (hit)
		{
			if (shot.hitActor)
			{
				let bolt = ThunderboltSpawn(Actor.spawn("ThunderboltSpawn", shot.hitactor.pos));
			} 
			else 
			{
				let bolt = ThunderboltSpawn(Actor.spawn("ThunderboltSpawn", shot.hitLocation));
			}
		}
	}
}

Class ThunderboltSpawn : Actor
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_StartSound("Attack/Thunder", CHAN_AUTO);
			}
			THUN ABCDE 2 A_ThunderBlast(BF_AFFECTBOSSES | BF_NOIMPACTDAMAGE | BF_ONLYVISIBLETHINGS, 128, 128, 32);
			stop;
	}
	
	Action void A_ThunderBlast(int blastflags = 0, double strength = 255, double radius = 255, double speed = 20, class<Actor> blasteffect = "BlastEffect", sound blastsound = "BlastRadius")
	{
		A_StartSound (blastsound, CHAN_AUTO);

		if (!(blastflags & BF_DONTWARN))
		{
			SoundAlert (self);
		}
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while ( (mo = Actor(it.Next ())) )
		{
			//ignore player
			if (Gardevoir(mo)) continue;
			if (mo == self || (mo.bBoss && !(blastflags & BF_AFFECTBOSSES)) || mo.bDormant || mo.bDontBlast)
			{ // Not a valid monster: originator, boss, dormant, or otherwise protected
				continue;
			}
			if (mo.bIceCorpse || mo.bCanBlast)
			{
				// Let these special cases go
			}
			else if (mo.bIsMonster && mo.health <= 0)
			{
				continue;
			}
			else if (!mo.player && !mo.bMissile && (!mo.bIsMonster && !BossBrain(mo)) && !mo.bCanBlast && !mo.bTouchy && !mo.bVulnerable)
			{	// Must be monster, player, missile, touchy or vulnerable
				continue;
			}
			if (Distance2D(mo) > radius)
			{ // Out of range
				continue;
			}
			if (mo.CurSector.PortalGroup != CurSector.PortalGroup && !CheckSight(mo))
			{
				// in another region and cannot be seen.
				continue;
			}
			if ((blastflags & 16) && !isVisible(mo, true)) 
			{
				//only blast if target can bee seen by calling actor
				continue;
			}
			A_MoonBlastActor(mo, strength, speed, blasteffect, !!(blastflags & BF_NOIMPACTDAMAGE));
		}
	}
	Action Void A_MoonBlastActor (Actor victim, double strength, double speed, Class<Actor> blasteffect, bool dontdamage)
	{
		if (!victim.SpecialBlastHandling (self, strength))
		{
			return;
		}

		double ang = AngleTo(victim);
		Vector2 move = AngleToVector(ang, speed);
		victim.Vel.XY = move;

		// Spawn blast puff
		ang -= 180.;
		Vector3 spawnpos = victim.Vec3Offset(
			(victim.radius + 1) * cos(ang),
			(victim.radius + 1) * sin(ang),
			(victim.Height / 2) - victim.Floorclip);
		Actor mo = blasteffect? Spawn (blasteffect, spawnpos, ALLOW_REPLACE) : null;
		if (mo)
		{
			mo.Vel.XY = victim.Vel.XY;
		}
		if (victim.bMissile)
		{
			// [RH] Floor and ceiling huggers should not be blasted vertically.
			if (!victim.bFloorHugger && !victim.bCeilingHugger)
			{
				victim.Vel.Z = 8;
				if (mo != null) mo.Vel.Z = 8;
			}
		}
		else
		{
			victim.Vel.Z = 1000. / victim.Mass;
		}
		if (victim.player)
		{
			// Players handled automatically
		}
		else if (!dontdamage)
		{
			victim.bBlasted = true;
		}
		if (victim.bTouchy)
		{ // Touchy objects die when blasted
			victim.bArmed = false; // Disarm
			victim.DamageMobj(self, self, victim.health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
		} else {
			victim.DamageMobj(self, Gardevoir(players[consoleplayer].mo), 512, "Explosive");
			if (victim.health > 0) victim.SetStateLabel('Pain');
		}
	}
}