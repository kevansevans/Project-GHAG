Class GHAGPistolOverlay : Inventory
{
	Default
	{
		Inventory.MaxAmount 4;
		Inventory.pickupMessage "Found an extra pistol!";
	}
	
	override void beginplay()
	{
		super.beginPlay();
		
		if (GameInfo.GameType == 2) Self.MaxAmount = 2;
	}
}
Class GHAGPistol : GHAGWeapon
{
	Default
	{
		Weapon.AmmoUse1 1;
		Weapon.SlotNumber 2;
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Tag "9mm Pistol";
	}
	
	Array<Actor> targets;
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
	}
	
	override void tick()
	{
		Super.Tick();
		
		setTag(Cvar.findCvar("PistolName").getString());
	}
	
	int getPistolCount()
	{
		return owner.countInv('GHAGPistolOverlay') * (owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
	}

	states
	{
		Ready:
			HAND A 1 {
				Invoker.AmmoUse2 = invoker.getPistolCount();
				A_WeaponReady(WRF_ALLOWUSER1);
				A_NullTargets();
			}
			Loop;
		Deselect:
			HAND A 1 {
				A_NullTargets();
				A_GHAGLower();
				A_OverlayPistols();
			}
			Loop;
		Select:
			HAND A 1 {
				A_GHAGRaise();
				A_OverlayPistols();
			}
			Loop;
		Fire:
			HAND AB 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3, true));
			}
			HAND C 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
			}
			HAND D 3 {
				A_FireBullets(Gardevoir(self).GetAccuracyModifier(4.3), Gardevoir(self).GetAccuracyModifier(4.3), 1, 8, "BulletPuff");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_SetTics(Gardevoir(self).GetTicModifier(3));
				A_OverlayPistols(true);
			}
			HAND EF 1 A_SetTics(Gardevoir(self).GetTicModifier(1, true));
			HAND G 5
			{
				A_SetTics(Gardevoir(self).GetTicModifier(5, true));
				A_ReFire();
			}
			Goto Ready;
		AltFire:
			HAND A 1 {
				if(A_AutoTarget()) return resolveState('AltFire.Shoot'); //A_Jump wouldn't work?
				return resolveState(null);
			}
			HAND A 3 A_StartSound("weapons/dryfire", CHAN_AUTO);
			goto Ready;
		AltFire.Shoot:
			HAND BC 3 A_SetTics(Gardevoir(self).GetTicModifier(3) * 2);
			HAND D 3
			{
				A_SetTics(Gardevoir(self).GetTicModifier(3) * 2);
				A_FireTargets();
			}
			TNT1 A 0
			{
				A_Refire();
			}
			HAND EFG 1;
			TNT1 A 0 A_NullTargets();
			Goto Ready;
		Fire.Overlay:
			PIST B 2 Bright A_SetTics(Gardevoir(self).GetTicModifier(2));
			PIST A 100;
			stop;
		AltFire.Overlay:
			PIST B 2 Bright;
		Select.Overlay:
			PIST A 1;
			loop;
		Deselect.Overlay:
			PIST A 1;
			loop;
		Ready.Overlay:
			PIST A 1;
			loop;
	}
	
	Action void A_OverlayPistols(bool RollForFire = false, bool AltFire = false)
	{
		int rng = random(0, (Min(invoker.getPistolCount() - 1, 3)));
		if (invoker.getPistolCount() > 1 && rng == invoker.lastRNG) 
		{
			while (rng == invoker.lastRNG)
			{
				rng = random(0, (invoker.getPistolCount() - 1));
			}
		}
		
		invoker.lastRNG = rng;
		
		let gardie = Gardevoir(invoker.owner);
		if (gardie.FloatGuns.Size())
		{
			if (RollForFire)
			{
				gardie.FloatGuns[rng].SetStateLabel('PistolFire');
			}
		}
	}
	
	Action bool A_AutoTarget()
	{
		let gardie = Gardevoir(self);
		invoker.targets.clear();
		
		if (!countInv("Clip"))
		{
			if (!GetCVar("sv_infiniteammo")) return false;
		}
		
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while ( (mo = Actor(it.Next ())) )
		{
			console.printf('Enemy check');
			if (!mo.bIsMonster) {
				if (CommanderKeen(mo)) console.printf('Fails at monster');
				continue;
			}
			if (mo.health <= 0) {
				if (CommanderKeen(mo)) console.printf('Fails at health');
				continue;
			}
			if (!mo.isVisible(self, true)) {
				if (CommanderKeen(mo)) console.printf('Fails at sight');
				continue;
			}
			if (invoker.targets.find(mo) != invoker.targets.size()) {
				if (CommanderKeen(mo)) console.printf('Fails at list check');
				continue;
			}
			
			double angle = (Gardevoir(invoker.owner).angleTo(mo) + self.angle) % 360;
			double anglebonus = 135 * Gardevoir(self).getRageModifier();
			if (angle < (self.angle % 360) - (45 + anglebonus) || angle > (self.angle % 360) + (45 + anglebonus)) continue;
			
			invoker.targets.push(mo);
		
			if (invoker.targets.size() >= invoker.getPistolCount())
			{
				console.printf('' .. invoker.targets.size() .. ":" .. invoker.getPistolCount());
				console.printf('fails at cap');
				break;
			}
		}
		
		if (invoker.targets.size() == 0) 
		{	
			console.printf('I am empty!');
			A_NullTargets();
			return false;
		}
		console.printf('Success!');
		return false;
	}
	
	Action void A_FireTargets()
	{
		let gardie = Gardevoir(self);
	
		int prevIndex = 0;
		for (int i = 0; i < invoker.getPistolCount(); ++i)
		{
			let gun = GHAGFloatingGun(gardie.floatGuns[i]);
			if (i < invoker.targets.size()) {
				prevIndex = i;
			}
			gun.targetOverride = invoker.targets[prevIndex];
			gun.SetStateLabel('PistolFire');
			double pitch = GHAGFloatingGun.PitchTo(self, invoker.targets[prevIndex], 0.75);
			double accuracy = Gardevoir(self).GetAccuracyModifier(4.3);
			LineAttack(angleTo(invoker.targets[prevIndex]) + random(-accuracy, accuracy), 4096, pitch + random(-accuracy, accuracy), 8, 'Melee', 'BulletPuff', LAF_ISMELEEATTACK);
			if (!GetCVar("sv_infiniteammo")) A_TakeInventory('Clip', 1);
			A_StartSound("weapons/pistol", CHAN_WEAPON);
		}
	}
	
	Action void A_NullTargets()
	{
		let gardie = Gardevoir(self);
	
		for (int i = 0; i < invoker.getPistolCount(); ++i)
		{
			let gun = GHAGFloatingGun(gardie.floatGuns[i]);
			gun.A_NullTarget();
		}
	}
}