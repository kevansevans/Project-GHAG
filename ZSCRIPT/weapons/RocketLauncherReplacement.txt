Class GHAGRocketAmmo : CustomInventory replaces RocketAmmo 
{
	default {
		inventory.pickupmessage "Found a piece of ordnance!";
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			ROCK A -1;
			Stop;
		Pickup:
			TNT1 A 0 {
				let gardie = Gardevoir(players[consoleplayer].mo);
				if (gardie.countinv("GHAGRocketLauncher") == 0) {
					A_GiveInventory("GHAGRocketLauncher", 1);
					A_SelectWeapon("GHAGRocketLauncher");
				}
				A_GiveInventory("RocketAmmo", 1);
			}
			stop;
	}
}

Class GHAGRocketBox : CustomInventory replaces RocketBox 
{
	default {
		inventory.pickupmessage "Found a box of ordnance!";
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			BROK A -1;
			Stop;
		Pickup:
			TNT1 A 0 {
				let gardie = Gardevoir(players[consoleplayer].mo);
				if (gardie.countinv("GHAGRocketLauncher") == 0) {
					A_GiveInventory("GHAGRocketLauncher", 1);
					A_SelectWeapon("GHAGRocketLauncher");
				}
				A_GiveInventory("RocketAmmo", Invoker.amount);
			}
			stop;
	}
}

Class GHAGRocketLauncher : RocketLauncher
{
	default {
		Weapon.AmmoGive 0;
		Weapon.SlotNumber 5;
		Tag "Explodey";
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}

	States {
		Ready:
			TNT1 A 0 {
				A_Overlay(2, "Speeen");
				A_OverlayFlags(2, PSPF_ADDBOB, false);
				A_OverlayOffset(2, sin(gametic * 2) / 13, cos(gametic * 2) / 11, WOF_ADD | WOF_INTERPOLATE);
			}
		Ready.Speen:
			HAND I 3 {
				A_WeaponReady();
				A_OverlayFlags(2, PSPF_ADDBOB, false);
				A_OverlayPivot(2);
				A_OverlayRotate(2, 25, WOF_ADD);
			}
			Loop;
		Deselect:
			HAND I 1 A_Lower();
			Loop;
		Select:
			HAND I 1 A_Raise();
			TNT1 A 0 {
				A_Overlay(2, "Speeen");
			}
			Loop;
		Fire:
			TNT1 A 0 A_Overlay(2, "Clear");
			RCKF ABCD 2;
			RCKF E 2 A_PsychicMissile();
			RCKF FG 2;
			TNT1 A 0 A_SetNewTagName();
			RCKF HIJKLM 1;
			TNT1 A 0 A_ReFire();
			goto Ready;
		Speeen:
			SPEN A 3;
			Loop;
		Clear:
			stop;
	}
	
	action void A_SetNewTagName() 
	{
		Invoker.setTag(Gardevoir(self).getRNGName());
	}
	
	action void A_PsychicMissile() 
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		let _locRocket = PsychicRocket(SpawnPlayerMissile("PsychicRocket"));
		if (_locRocket) {
			_locRocket.Vel3DFromAngle(20 + (44 * Gardevoir(self).GetRageModifier()), Gardevoir(self).angle, Gardevoir(self).pitch); 
			_locRocket.modifier = Gardevoir(self).GetRageModifier();
		}
	}
}

Class PsychicRocket : Rocket
{

	double modifier;
	property modifier: modifier;
	
	Default 
	{
		PsychicRocket.modifier 1;
	}

	States {
		Death:
			TNT1 A 0 A_SetScale(1 + modifier, 1 + modifier);
			MISL B 8 Bright A_Explode(100 * (1 + modifier), Max(256, 128 * (1 + modifier)), XF_HURTSOURCE | XF_THRUSTZ);
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

Class GrenadeRocket : Rocket
{
	default
	{
		//+Gravity;
	}
}