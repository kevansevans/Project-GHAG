Class GHAGPsychoCutterOverlay : Ammo
{
	default
	{
		Inventory.MaxAmount 4;
	}
	
	override void beginplay()
	{
		super.beginPlay();
		
		if (GameInfo.GameType == 2) Self.MaxAmount = 2;
	}
}

Class ExtraPsychoCutter : CustomInventory replaces Chainsaw
{
	default
	{
		+Floatbob;
		Inventory.PickupMessage "You want to make it personal, Mr. Wang?";
		Inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			CSAW A 1 Bright
			{
				let player = Gardevoir(players[consoleplayer].mo);
				int limit = GameInfo.GameType == 1 ? 4 : 2;
				if (player.countinv("GHAGPsychoCutterOverlay") == limit)
				{
					invoker.spawn("RageCandyBar", invoker.pos);
					invoker.destroy();
				}
			}
			Loop;
		Pickup :
			TNT1 A 0
			{
				let player = Gardevoir(players[consoleplayer].mo);
				player.giveInventory("GHAGPsychoCutterOverlay", 1);
				if (player.countinv("GHAGPsychoCutter") == 0) {
					player.giveInventory("GHAGPsychoCutter", 1);
					A_SelectWeapon("GHAGPsychoCutter");
				}
			}
			stop;
	}
}

Class ExtraPsychoCutterDrop : CustomInventory
{
	bool touched;
	default
	{
		+Floatbob;
		Inventory.PickupMessage "";
		Inventory.pickupsound "misc/w_pkup";
	}
	
	States
	{
		Spawn:
			CSAW A 1 Bright;
			Loop;
		Pickup :
			TNT1 A 0
			{
				if (!invoker.touched) //Prevents chainsaw duplicating
				{
					invoker.touched = true;
					let player = Gardevoir(players[consoleplayer].mo);
					player.giveInventory("GHAGPsychoCutterOverlay", 1);
					if (player.countinv("GHAGPsychoCutter") == 0) player.giveInventory("GHAGPsychoCutter", 1);
				}
			}
			stop;
	}
}

Class GHAGPsychoCutter : Weapon
{

	mixin IcePunch;

	Default
	{
		Weapon.SlotNumber 1;
		Tag "Psycho Cutter";
	}
	
	override void tick()
	{
		Super.tick();
		
		setTag(Cvar.findCvar("ChainsawName").getString());
	}
	
	int getChainsawCount()
	{
		return owner.countInv('GHAGPsychoCutterOverlay') * (owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
	}
	
	States
	{
		Select:
			HAND A 1 {
				A_Raise();
				A_OverlayChainsaws();
			}
			Loop;
		Deselect:
			HAND A 1
			{
				A_Lower();
				A_OverlayChainsaws();
			}
			Loop;
		Ready:
			HAND A 1 
			{
				A_WeaponReady();
				A_OverlayChainsaws();
				if (invoker.owner.CountInv("IcePunchItem") > 0)
				{
					return resolveState("IcePunchAttack");
				}
				return resolveState(null);
			}
			Loop;
		Fire:
			HAND JJJJ 1 A_OverlayChainsaws(true);
			TNT1 A 0 {
				for (int i = 0; i < invoker.getChainsawCount(); ++i)
				{
					A_Saw(	"weapons/sawfull", 
							"weapons/sawhit", 
							2 * invoker.getChainsawCount(), 
							"BulletPuff", 
							SF_NOUSEAMMO | SF_NOPULLIN | SF_NOTURN, 
							56 + (8 * invoker.getChainsawCount() + (44 * Gardevoir(self).getRageModifier())), 
							4.8125 * invoker.getChainsawCount()
						);
				}
			}
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (countinv('GHAGPsychoCutterOverlay') == 0) return resolveState('Ready');
				return resolveState(null);
			}
			TNT1 A 0
			{
				TakeInventory('GHAGPsychoCutterOverlay', 1);
				A_FireProjectile('GHAGPsychoProjectile'); 
				A_OverlayChainsaws(false);
			}
			HAND AABBCCDDEE 1 A_OverlayChainsaws(false);
			goto Ready;
		Overlay:
			PSAW AB 2;
			stop;
		IcePunchAttack:
			TNT1 A 0 A_IcePunchPrecalc();
			HAND AAA 2 {
				A_OverlayIcePunch();
			}
			HAND AA 2
			{
				A_OverlayIcePunch();
				A_IcePunch();
			}
			HAND A 1
			{
				A_ClearOverlays(2, 2);
				invoker.owner.TakeInventory("IcePunchItem", 1);
			}
			goto Ready;
		IcePunch.Overlay:
			IPUN AB 3 A_SetTics(Gardevoir(self).GetTicModifier(3));
			IPUN C 4;
			IPUN DEF 4 A_SetTics(Gardevoir(self).GetTicModifier(4));
			stop;
	}
	
	Action Void A_OverlayChainsaws(bool _psycho = false)
	{
		if (_psycho) {
			for (int i = 0; i < invoker.getChainsawCount(); ++i)
			{
				int layer = (i * -1) -1;
				
				A_DrawChainsaw("Overlay", layer, true);
				A_OverlayPivot(layer);
				A_OverlayRotate(layer, 80 + (5 * sin(gametic) * (i >= 2 ? -1 : 1)));
				
				A_OverlayOffset(layer, 
								//x offset
								sin(gametic * (i + 1) * 3.0) * (80 + (80 * Gardevoir(self).getRageModifier())) * (Gardevoir(self).getRageModifier() * 1.5) - (i >= 2 ? - 140 : 40), 
								//y offset
								100, 
								WOF_INTERPOLATE);
								
				if (invoker.owner.countInv("PowerWeaponLevel2") >= 1)
				{
					int realCount = int(invoker.getChainsawCount() / 2);
					if (i + 1 > realcount)
					{
						A_OverlayFlags(layer, PSPF_RENDERSTYLE, true);
						A_OverlayRenderstyle(layer, STYLE_SoulTrans);
						A_OverlayAlpha (layer, 0.25);
					}
				}
			}
		}
		else
		{
			for (int i = 0; i < invoker.getChainsawCount(); ++i)
			{
				int layer = (i * -1) - 1;
				
				A_DrawChainsaw("Overlay", layer, true);
				A_OverlayRotate(layer, 0);
				A_OverlayOffset(layer, (i >= 2 ? -200 : -150), (cos(gametic * layer) * 4) + 50 + (i >= 2 ? -60 : 0), WOF_INTERPOLATE);
				
				if (invoker.owner.countInv("PowerWeaponLevel2") >= 1)
				{
					int realCount = int(invoker.getChainsawCount() / 2);
					if (i + 1 > realcount)
					{
						A_OverlayFlags(layer, PSPF_RENDERSTYLE, true);
						A_OverlayRenderstyle(layer, STYLE_SoulTrans);
						A_OverlayAlpha (layer, 0.25);
					}
				}
			}
		}
		
		int layerStart = invoker.getChainsawCount() * -1;
		A_ClearOverlays(-10, layerStart - 1);
	}
	
	//Reduce duplicate code for A_Overlay shared between both modes
	Action void A_DrawChainsaw(statelabel statename, int layer, bool _override)
	{
		A_Overlay(layer, statename, _override);
		A_OverlayFlags(layer, PSPF_ADDBOB, false);
		int i = (layer + 1) * -1;
		if (i % 2 != 0) A_OverlayFlags(layer, PSPF_FLIP | PSPF_MIRROR, true);
	}
	
}

Class GHAGPsychoProjectile : Actor
{
	default
	{
		+RollSprite;
		+HitTarget;
		+SkyExplode;
		Projectile;
		Speed 20;
		DropItem "ExtraPsychoCutterDrop";
	}
	
	int lifespan;
	int bloodscale;
	float pos_x;
	float pos_y;
	float pos_z;

	override void BeginPlay()
	{
		Super.BeginPlay();
		A_SetRoll(random(0, 360));
		bloodscale = lifespan = 5 + (10 * Gardevoir(players[consoleplayer].mo).GetRageModifier());
		Self.speed = 20 + (20 * Gardevoir(players[consoleplayer].mo).getRageModifier());
	}
	states
	{
		Spawn:
			CSAW AB 1 Bright;
			Loop;
		Death :
			CSAW A 1 Bright {
				if (Invoker.target)
				{
					if (Invoker.target.bIsMonster) {
						pos_x = random(-(Invoker.target.radius / 2), Invoker.target.radius / 2);
						pos_y = random(-(Invoker.target.radius / 2), Invoker.target.radius / 2);
						pos_z = random(10, Invoker.target.height);
						return resolveState('Lacerate');
					}
				}
				A_NoBlocking();
				return resolveState(null);
			}
			stop;
		Lacerate:
			CSAW ABABA 1 Bright;
			TNT1 A 0
			{
				A_StartSound("weapons/chainhit", CHAN_AUTO);
				Self.SetOrigin((Invoker.target.pos.x + pos_x + random(-1, 1), Invoker.target.pos.y + pos_y + random(-1, 1), Invoker.target.pos.z + pos_z + random(-1, 1)), true);
				int damage = int((random() % 10 + 1) * 1.5);
				Invoker.target.damagemobj(self, Gardevoir(players[consoleplayer].mo), damage, 'Melee');
				for (int i = 0; i < bloodscale; ++ i) 
				{
					Vector3 bloodpos = invoker.pos;
					bloodpos.x += random(-3, 3);
					bloodpos.y += random(-3, 3);
					bloodpos.z += random(-3, 3);
					Invoker.target.spawnblood(bloodpos, invoker.angle, damage);
				}
				--lifespan;
				if (lifespan == 0 || !Invoker.target || Invoker.target.health <= 0) 
				{
					return ResolveState('LacerationDeath');
				}
				return resolveState(null);
			}
			loop;
		LacerationDeath :
			CSAW A 1 Bright A_NoBlocking();
			stop;
	}
}