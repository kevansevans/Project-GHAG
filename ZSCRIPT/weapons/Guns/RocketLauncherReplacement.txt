Class GHAGRocketLauncherReplace : CustomInventory replaces RocketLauncher 
{
	default {
		inventory.pickupmessage "Found some ordnance! Feels like something else was supposed to be here...";
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			ROCK A -1;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("GHAGRocketLauncher");
			TNT1 A 0 A_GiveInventory("RocketAmmo", 2);
			stop;
	}
}

Class GHAGRocketAmmo : CustomInventory replaces RocketAmmo 
{
	default {
		inventory.pickupmessage "Found a piece of ordnance!";
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			ROCK A -1;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("GHAGRocketLauncher");
			TNT1 A 0 A_GiveInventory("RocketAmmo", 1);
			stop;
	}
}

Class GHAGRocketBox : CustomInventory replaces RocketBox 
{
	default {
		inventory.pickupmessage "Found a box of ordnance!";
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn:
			BROK A -1;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("GHAGRocketLauncher");
			TNT1 A 0 A_GiveInventory("RocketAmmo", 5);
			stop;
	}
}


Class GHAGRocketLauncher : RocketLauncher
{
	default {
		Weapon.AmmoGive 0;
		Weapon.SlotNumber 5;
		Tag "Explodey";
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}

	States {
		Ready:
			RCKL ABCDEFGHIJKLMNO 3 A_WeaponReady;
			Loop;
		Deselect:
			#### # 1 A_Lower;
			Loop;
		Select:
			RCKL A 1 A_Raise;
			Loop;
		Fire:
			RCKF ABCD 2;
			RCKF E 2 A_PsychicMissile();
			RCKF FG 2;
			TNT1 A 0 A_SetNewTagName();
			RCKF HIJKLM 1;
			TNT1 A 0 A_ReFire();
	}
	
	action void A_SetNewTagName() 
	{
		Invoker.setTag(Gardevoir(self).getRNGName());
	}
	
	action void A_PsychicMissile() 
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		let _locRocket = PsychicRocket(SpawnPlayerMissile("PsychicRocket"));
		if (_locRocket) {
			_locRocket.Vel3DFromAngle(20 + (100 * Gardevoir(self).GetRageModifier()), Gardevoir(self).angle, Gardevoir(self).pitch); 
			_locRocket.modifier = Gardevoir(self).GetRageModifier();
		}
	}
}

Class PsychicRocket : Rocket
{

	double modifier;
	property modifier: modifier;
	
	Default 
	{
		PsychicRocket.modifier 1;
	}

	States {
		Death:
			TNT1 A 0 A_SetScale(1 + modifier, 1 + modifier);
			MISL B 8 Bright A_Explode(100 * (1 + modifier), Max(256, 128 * (1 + modifier)));
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}