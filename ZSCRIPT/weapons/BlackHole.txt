Class BlackHole : Weapon
{
	mixin BlackHoleAttacks;

	Default
	{
		Tag "Black Hole";
		Weapon.slotNumber 8;
		+Weapon.Ammo_Optional;
		+Weapon.No_Auto_Switch;
		Weapon.SelectionOrder 5000;
	}
	
	int charge;
	double zoom;
	
	PointLight glowy;
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		charge = 0;
		zoom = 1;
	}
	
	states
	{
		Select:
			MPUN A 1 A_Raise();
			Loop;
		Deselect:
			MPUN A 1 A_Lower();
			Loop;
		Ready:
			MPUN A 1 A_WeaponReady();
			Loop;
		Fire:
			MPUN A 1 
			{
				if (Gardevoir(self).ragevalue <= 0 && invoker.charge <= 0)
				{
					return resolveState("Ready");
				}
				return resolveState(null);
			}
			TNT1 A 0
			{	
				Gardevoir(self).chargingBlackHole = true;
				if (invoker.charge <= 0) A_StartSound("blackhole/POWERON", CHAN_WEAPON);
				if (!invoker.glowy) {
					invoker.glowy = Pointlight(self.spawn("PointLight", self.pos));
					invoker.glowy.bSubtractive = true;
					invoker.glowy.bDontLightSelf = true;
					invoker.glowy.bNoShadowMap = true;
					invoker.glowy.args[0] = 0x6A * 3;
					invoker.glowy.args[1] = 0x06 * 3;
					invoker.glowy.args[2] = 0xAD * 3;
					
					A_Overlay(-1, "BlackHoleOverlay", false);
					A_OverlayOffset(-1, 160, 140);
					A_OverlayPivot(-1);
				}
				invoker.glowy.SetOrigin(self.pos, true);
				invoker.glowy.args[3] = invoker.charge * 4;
				
				Self.bShootable = false;
				if (!A_BlackHole()) {
					double intensity = 10 * (double(invoker.charge) / 125);
					double scale = round((0.1 + (intensity * 0.1) * 80)) / 100;
					A_OverlayScale(-1, scale, scale);
					A_OverlayOffset(-1, 160, 140);
					A_QuakeEx(int(intensity), int(intensity), int(intensity), 25, 0, invoker.charge, "", QF_SCALEDOWN);
					A_ZoomFactor(invoker.zoom -= 0.0025);
					if (invoker.charge < 125) A_Refire();
				}
			}
		Fire.Launch:
			TNT1 A 0 {
				A_StopSound(CHAN_WEAPON);
				A_FireBlackHole();
				A_Overlay(-1, "Clear");
				invoker.glowy.destroy();
				Self.bShootable = true;
				Gardevoir(self).chargingBlackHole = false;
			}
			MPUN A 48 A_ZoomFactor(1);
			goto Ready;
		BlackHoleOverlay:
			BKHL ABCDEFGHIJKLMN 4 Bright;
			loop;
		ClearOverlay:
			stop;
		
	}

	Action bool A_BlackHole()
	{
		if (Gardevoir(self).rageValue > 0)
		{
			invoker.charge += 1;
			Gardevoir(self).subtractAnger(8);
			A_BlackHoleRadialAttack(invoker.charge * 4);
			return false;
		} 
		else if (Gardevoir(self).rageValue == 0 && invoker.charge > 0) 
		{
			return true;
		}
		return false;
	}
	
	Action void A_FireBlackHole()
	{
		let _locBlackHole = BlackHoleProjectile(SpawnPlayerMissile("BlackHoleProjectile"));
		_locBlackHole.charge = invoker.charge;
		_locBlackHole.suckRange = invoker.charge * 4;
		
		invoker.charge = 0;
		invoker.zoom = 1;
	}
}

Class BlackHoleProjectile : Actor
{
	mixin BlackHoleAttacks;

	int charge;
	double extra;
	double suckRange;
	double alpha;
	PointLight glowy;
	LightningFizzle fizzyA;
	LightningFizzle fizzyB;
	LightningFizzle fizzyC;
	
	default
	{
		Radius 5;
		Height 5;
		Speed 10;
		Projectile;
		+ThruActors;
	}
	
	override void Tick()
	{
		super.tick();
		
		if (self.vel.x == 0 && self.vel.y == 0) 
		{
			double decay = (1 / double(charge * 16));
		
			self.vel.z = 0;
			A_SetRenderStyle(self.alpha, STYLE_Translucent);
			self.alpha -= decay;
			
			if (self.alpha <= 0) 
			{
				glowy.destroy();
				fizzyA.destroy();
				fizzyB.destroy();
				fizzyC.destroy();
				self.destroy();
			}
		}
		
		if (glowy) {
			glowy.args[0] -= (1 / (double(0x6A * 3 * 16)));
			glowy.args[1] -= (1 / (double(0x6A * 3 * 16)));
			glowy.args[2] -= (1 / (double(0x6A * 3 * 16)));
			glowy.SetOrigin(self.pos, true);
			glowy.args[3] = charge * 4;
		}
			
		if (fizzyA && fizzyB && fizzyC)
		{
			fizzyA.setOrigin(self.pos, true);
			fizzyB.setOrigin(self.pos, true);
			fizzyC.setOrigin(self.pos, true);
		}
			
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		charge = 0;
		suckRange = 0;
		alpha = 1;
		
		glowy = Pointlight(self.spawn("PointLight", self.pos));
		glowy.bSubtractive = true;
		glowy.bDontLightSelf = true;
		glowy.bNoShadowMap = true;
		glowy.args[0] = 0x6A * 3;
		glowy.args[1] = 0x06 * 3;
		glowy.args[2] = 0xAD * 3;
		
		fizzyA = LightningFizzle(self.spawn("LightningFizzle", self.pos));
		fizzyB = LightningFizzle(self.spawn("LightningFizzle", self.pos));
		fizzyC = LightningFizzle(self.spawn("LightningFizzle", self.pos));
		
		A_StartSound("blackhole/MACHAMB", CHAN_AUTO, CHANF_LOOPING);
		A_StartSound("blackhole/ELECSUCK", CHAN_AUTO, CHANF_LOOPING);
	}
	
	States 
	{
		Death:
		Spawn :
			BKHL AABBCCDDEEFFGGHHIIJJKKLLMMNN 2 Bright {
				A_SetScale(double(invoker.charge) / double(125), double(invoker.charge) / double(125));
				double munch = A_BlackHoleRadialAttack((invoker.charge * 4) + invoker.extra);
				if (munch > 0) {
					invoker.extra += munch;
					A_ResetBlackHole();
				}
			}
		loop;
	}
	
	action void A_ResetBlackHole()
	{
		invoker.glowy.args[0] = 0x6A * 3;
		invoker.glowy.args[1] = 0x06 * 3;
		invoker.glowy.args[2] = 0xAD * 3;
		invoker.alpha = 1;
		A_SetRenderStyle(1.0, STYLE_Translucent);
	}
}

mixin class BlackHoleAttacks
{
	action double A_BlackHoleRadialAttack(double radius = 255)
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		double addedmass = 0;
		
		int flags = DMSS_FOILINVUL | DMSS_FOILBUDDHA | DMSS_NOPROTECT | DMSS_NOFACTOR;
		
		while ( (mo = Actor(it.Next ())) )
		{
			//ignore critical classes.
			if (Gardevoir(mo)) continue; //is Player. Gardevoir ignores gravity
			if (BlackHoleProjectile(mo)) continue; //Ignore other black holes
			if (Key(mo)) continue; //Keys are critical items. Important to not have these move from their locations
			if (Inventory(mo)) { //Apparently player held items get checked in a thinkiterator
				if (Inventory(mo) && Inventory(mo).owner is "PlayerPawn") continue;
			}
			if (mo is "BossTarget" || mo is "BossEye" || (mo is "Rocket" && !(mo.target))) continue;
			if (mo is "TeleportDest") continue;
			if (mo is "lightningfizzle") continue;
			if (PowerupGiver(mo)) continue;
			if (Weapon(mo)) continue;
			
			//special code for icon of sin
			if (mo is "BossBrain" && Distance3D(mo) < radius * 2)
			{
				mo.A_DamageSelf(2, "none", flags);
				continue;
			}
			
			if (Distance3D(mo) < radius * 4)
			{
				A_BlackHoleSuck(mo, 64, -32);
				if (mo.bIsMonster && mo.health > 0) {
					mo.bNoFear = false;
					mo.bFrightened = true;
					mo.A_DamageSelf(((radius * 2) - (distance3D(mo) * 2)), "none", flags);
					if (gametic % 2 == 0 && mo.health > 0) mo.setStateLabel("Pain");
				}
				
				if (mo.bSolid && isVisible(mo, true) && !mo.bIsMonster) continue;
			}
			
			if (Distance3D(mo) < radius * 3.5)
			{
				//This statement here helps improve performance among actors who are very likely to die
				//Enemies here are extremely close to the event horizon AND WILL DIE, so to save on
				//performance and ensure they don't hitch on each other, these flags are set to true
				if (mo.bIsMonster && isVisible(mo, true)) {
					mo.bThruActors = true;
					mo.A_ChangeLinkFlags(false);
				}
			}
			
			if (Distance3D(mo) < radius * 2)
			{
				if (mo.bMissile) {
					if (mo is "ArachnotronPlasma")
					{
						mo.spawn("ArachnotronParticleProj", mo.pos);
					} else if (mo is "BaronBall") {
						mo.spawn("BruiserParticleProj", mo.pos);
					} else if (mo is "CacodemonBall") {
						mo.spawn("CacoParticleProj", mo.pos);
					} else if (mo is "rocket") {
						mo.spawn("RocketParticle", mo.pos);
					} else if (mo is "FatShot") {
						mo.spawn("FattyParticleProj", mo.pos);
					} else if (mo is "RevenantTracer") {
						mo.spawn("BonerParticleProj", mo.pos);
					}
					mo.destroy();
					addedMass += 0.001;
				}
				if (Inventory(mo)) {
					mo.touch(players[consoleplayer].mo);
					if (mo) {
						mo.destroy();
						addedMass += 0.002;
					}
				}
				if (mo.bIsMonster) {
					if (mo.bCorpse && distance3D(mo) <= 16) mo.destroy();
					else if (mo.health > 0) {
						mo.A_DamageSelf(50 * ((radius * 2) - distance3D(mo)), "none", flags);
						if (gametic % 2 == 0 && mo.health > 0) mo.setStateLabel("Pain");
					} else {
						if (mo.tics <= 0) {
							if (mo is "DoomImp")
							{
								if (mo.health <= mo.gibhealth) mo.spawn("ImpParticleGib", mo.pos);
								else mo.spawn("ImpParticle", mo.pos);
							} else if (mo is "Arachnotron") {
								mo.spawn("ArachnotronParticle", mo.pos);
							} else if (mo is "Demon") {
								mo.spawn("PinkyParticle", mo.pos);
							} else if (mo is "HellKnight") {
								mo.spawn("KnightParticle", mo.pos);
							} else if (mo is "BaronOfHell") {
								mo.spawn("BaronParticle", mo.pos);;
							} else if (mo is "Cacodemon") {
								mo.spawn("CacoParticle", mo.pos);
							} else if (mo is "Cyberdemon") {
								mo.spawn("CyberParticle", mo.pos);
							} else if (mo is "ChaingunGuy") {
								if (mo.health <= mo.gibhealth) mo.spawn("ChainParticleGib", mo.pos);
								else mo.spawn("ChainParticle", mo.pos);
							} else if (mo is "Fatso") {
								mo.spawn("FattyParticle", mo.pos);
							} else if (mo is "LostSoul") {
								mo.spawn("SoulParticle", mo.pos);
							} else if (mo is "PainElemental") {
								mo.spawn("PainParticle", mo.pos);
							} else if (mo is "Revenant") {
								mo.spawn("BonerParticle", mo.pos);
							} else if (mo is "ShotgunGuy") {
								if (mo.health <= mo.gibhealth) mo.spawn("ShottyParticleGib", mo.pos);
								else mo.spawn("ShottyParticle", mo.pos);
							} else if (mo is "SpiderMastermind") {
								mo.spawn("SpiderParticle", mo.pos);
							} else if (mo is "WolfensteinSS") {
								if (mo.health <= mo.gibhealth) mo.spawn("NaziParticleGib", mo.pos);
								else mo.spawn("NaziParticle", mo.pos);
							} else if (mo is "Zombieman") {
								if (mo.health <= mo.gibhealth) mo.spawn("ZombieParticleGib", mo.pos);
								else mo.spawn("ZombieParticle", mo.pos);
							} else if (mo is "Archvile") {
								mo.spawn("ArchvileParticle", mo.pos);
							} 
							addedmass += double(mo.mass) * 0.0002;
							mo.destroy();
						}
					}
				}
			}
		}
		return addedmass;
	}
	
	action Void A_BlackHoleSuck (Actor victim, double strength, double speed)
	{
		double ang = AngleTo(victim);
		Vector2 move = AngleToVector(ang, speed);
		victim.Vel.XY = move;
		victim.Vel.Z = 64. / victim.Mass;
	}
}

Class LightningFizzle : Actor
{
	default
	{
		+NoGravity;
		+RollSprite;
	}
	States
	{
		Spawn :
			LTNG A 2 Bright A_SetRoll(random(0, 359), SPF_INTERPOLATE);
			TNT1 A 0 A_SetTics(random(1, 15));
			LTNG B 2 Bright A_SetRoll(random(0, 359), SPF_INTERPOLATE);
			TNT1 A 0 A_SetTics(random(1, 15));
			LTNG C 2 Bright A_SetRoll(random(0, 359), SPF_INTERPOLATE);
			TNT1 A 0 A_SetTics(random(1, 15));
			loop;
	}
}