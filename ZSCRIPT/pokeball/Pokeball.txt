Class PokeBallGun : Weapon
{

	Actor TargetDemon;
	
	Default
	{
		Weapon.SlotNumber 9;
		Tag "Pokeball";
	}
	
	states 
	{
		Select:
			HAND A 1 A_Raise();
			Loop;
		Deselect:
			HAND A 1 A_Lower();
			Loop;
		Ready:
			HAND A 1 A_WeaponReady();
			Loop;
		Fire:
			HAND D 8 A_ThrowBall();
			HAND D 1 A_Refire();
			goto Ready;
	}
	
	override void Tick()
	{
		Super.tick();
		
	}	
	
	Action void A_ThrowBall()
	{
		let _locBall = SpawnPlayerMissile("PokeballProj", angle);
	}
}

Class PokeBallCaughtGun : Weapon
{
	Default
	{
		Weapon.SlotNumber 0;
	}
	states 
	{
		Select:
		Deselect:
		Ready:
			HAND A 1;
			Loop;
		Fire:
			HAND D 1;
			HAND D 1 A_Refire();
			goto Ready;
	}
}

Class PokeBallProj : Actor
{
	int shakes;
	int prevHeight;
	
	default
	{
		+Missile;
		+HitTarget;
		Speed 50;
	}
	
	states
	{
		Spawn:
			PBAL A 1;
			Loop;
		Death:
			#### A 0 A_JumpIf(Invoker.target, "TryToCatch");
			Stop;
		TryToCatch:
			#### A 0 {
				invoker.bNoGravity = true;
				A_NoBlocking();
				A_FreezeTarget();
			}
			#### CD 4;
		WaitLoop:
			#### D 1 A_JumpIf(A_Shrink(), "Fall");
			Loop;
		Fall:
			#### DC 4;
			#### B 35;
		ShakeShakeShake :
			#### B 8;
			#### BEBFB 4;
			#### B 0 A_JumpIf(A_RollForCatch(), "FailCatch");
			#### B 0 A_JumpIf(A_CheckIfCaught(), "Caught");
			loop;
		FailCatch:
			#### GH 4;
		FailReleaseLoop :
			#### h 1 A_JumpIf(A_Grow(), "BreakBall");
			loop;
		BreakBall:
			#### A 0;
			stop;
		Caught:
			#### IJKL 4 Bright;
		CaughtLoop:
			#### B 1 Bright;
			loop;
			
	}
	
	Action void A_FreezeTarget()
	{
		if (Gardevoir(invoker.target) || PokeBallProj(invoker.target) || !invoker.target.bIsMonster)
		{
			Self.Destroy();
			return;
		}
		
		if (WolfensteinSS(invoker.target))
		{
			invoker.target.A_Explode();
			Self.destroy();
			return;
		}
		
		let target = Invoker.target;
		
		Target.tics = 99999;
		Target.A_SetRenderStyle(1, STYLE_Stencil);
		Target.SetShade("FF0000");
		Target.A_SetInvulnerable();
		Target.A_NoBlocking(false);
		invoker.prevHeight = Target.height;
		target.height = 0;
	}
	
	Action bool A_Shrink()
	{
		let target = Invoker.target;
		if (target.scale.x > 0.1)
		{
			target.A_SetScale(Target.scale.x - 0.05);
			return false;
		} else {
			Target.A_SetRenderStyle(1, STYLE_None);
			invoker.bNoGravity = false;
			return true;
		}
	}
	
	Action Bool A_Grow()
	{
		let target = Invoker.target;
		
		if (target.scale.x <= 1)
		{
			target.A_SetScale(target.scale.x + 0.05);
		} 
		else 
		{
			Vector3 setpos = Target.pos;
			setpos.z = Target.height;
			SetOrigin(setpos, false);
			Target.A_SetScale(1);
			Target.A_SetRenderStyle(1, STYLE_Normal);
			Target.SetStateLabel("See");
			Target.A_UnSetInvulnerable();
			Target.bSolid = true;
			target.height = invoker.prevHeight;
			return true;
		}
		
		return false;
	}
	
	Action bool A_CheckFloor()
	{
		return invoker.pos.z <= (invoker.floorz + 5);
	}
	
	Action bool A_RollForCatch()
	{
		bool roll = invoker.ShakeFunction();
		if (roll) 
		{
			invoker.shakes += 1;
			return false;
		}
		else {
			Target.A_SetRenderStyle(1, STYLE_Stencil);
			Target.SetShade("FF0000");
			return true;
		}
	}
	
	Action bool A_CheckIfCaught()
	{
		return invoker.shakes == 3;
	}
	
	bool ShakeFunction()
	{
		return true;
		
		let tracker = ActorTrackerThinker.get();
		
		if (tracker.infolist.find(target) != tracker.infolist.size())
		{
			int N = random(0, 255);
		
			ActorInfo stats = tracker.infolist[tracker.infolist.find(target)];
			
			if ((stats.paralyzed || stats.burned) && N <= 12) return true;
			if (stats.frozen && N <= 25) return true;
		}
		
		int M  = random(0, 255);
		
		int numerator = Target.spawnHealth() * 255 * 4;
		int denominator = Target.health * 12;
		int F = numerator / denominator;
		
		if (F >= M) return true;
		
		return false;
	}
	
	int getCatchRate(int value)
	{
		return max(255 - (255 * (value / 4000)), 1);
	}
}

Class GreatBallProj : PokeBallProj
{

}

Class UltraBallProj : PokeBallProj
{

}

Class MasterBallProj : PokeBallProj
{

}

class PokeBallAmmo : Ammo
{
	default
	{
		Inventory.MaxAmount 255;
		Inventory.PickupMessage "Found a Pokeball!";
	}
}

class GreatBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "Found a GreatBall! Quite nice!";
	}
}

class UltraBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "Found an UltraBall! Awesome!";
	}
}

class MasterBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "The lottery smiles in your favor! Found a MasterBall!";
	}
}
