Class GHAGPistol : Pistol replaces Pistol
{

	Default
	{
		Weapon.SlotNumber 2;
	}

	states
	{
		Ready:
			PIST A 1 A_WeaponReady;
			Loop;
		Deselect:
			PIST A 1 A_Lower;
			Loop;
		Select:
			PIST A 1 A_Raise;
			Loop;
		Fire:
			PIST AB 3 Offset(2, 38) {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
			}
			PIST C 3 Offset(4, 42){
				A_SetTics(Gardevoir(self).GetTicModifier(3, true));
			}
			PIST D 3 Offset(4, 42) {
				A_FireBullets(Gardevoir(self).GetAccuracyModifier(5.6), Gardevoir(self).GetAccuracyModifier(5.6), 1, 8, "BulletPuff");
				A_PlaySound("weapons/pistol", CHAN_WEAPON);
				A_SetTics(Gardevoir(self).GetTicModifier(3, true));
				A_GunFlash();
			}
			PIST EF 1 Offset(2, 39) {
				Gardevoir(self).GetTicModifier(1, true);
			}
			PIST G 5
			{
				A_SetTics(Gardevoir(self).GetTicModifier(5));
				A_ReFire();
			}
			Goto Ready;
		Flash :
			PISF A 3 Bright {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
			}
			GoTo LightDone;
		AltFire :
			PIST D 2 {
				Gardevoir(self).GetHeckingAngery();
				
				/*FLineTraceData hitscan;
				LineTrace(Gardevoir(self).angle, 2048, Gardevoir(self).pitch, TRF_ALLACTORS, Gardevoir(self).height - 12, 0, 0, hitscan);
				if (hitscan.HitType == TRACE_HitActor) {
					let _locBarrel = ExplosiveBarrel(hitscan.HitActor);
					if (_locBarrel) {
						A_SeekerMissile(0, 360, SMF_LOOK, 255);
						if (tracer) {
							_locBarrel.setStateLabel("Chase");
						}
					}
					let _locAmmo = Ammo(hitscan.HitActor);
					if (_locAmmo) {
						_locAmmo.target = Gardevoir(self);
						_locAmmo.A_FaceTarget();
						_locAmmo.Vel3DFromAngle(5 * (5 * Gardevoir(self).GetRageModifier()), _locAmmo.angle, -30);
					}
					let _locWeapon = DoomWeapon(hitscan.HitActor);
					if (_locWeapon) {
						_locWeapon.target = Gardevoir(self);
						_locWeapon.A_FaceTarget();
						_locWeapon.Vel3DFromAngle(5 * (5 * Gardevoir(self).GetRageModifier()), _locWeapon.angle, -30);
					}
					let _locHealth = Health(hitscan.HitActor);
					if (_locHealth) {
						_locHealth.target = Gardevoir(self);
						_locHealth.A_FaceTarget();
						_locHealth.Vel3DFromAngle(5 * (5 * Gardevoir(self).GetRageModifier()), _locHealth.angle, -30);
					}
				}*/
			}
			PIST D 2;
			goto Ready;
	}
}