Class CaughtInfo : Object
{
	String ActorClass;
	String BallType;
	bool shiny;
	bool isOut;
	Actor SentDemon;
}

Class TrainerThinker : Thinker
{
	Array<CaughtInfo> CaughtList;
	
	int ID_A;
	int ID_B;
	int ID_C;
	int ID_D;
	int ID_E;
	int ID_F;

	TrainerThinker Init()
	{
		ChangeStatNum(STAT_STATIC);
		
		CaughtList.clear();
		
		ID_A = random(0, 9);
		ID_B = random(0, 9);
		ID_C = random(0, 9);
		ID_D = random(0, 9);
		ID_E = random(0, 9);
		ID_F = random(0, 9);
		
		return self;
	}
	
	static TrainerThinker Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("TrainerThinker", STAT_STATIC);
		let p = TrainerThinker(it.Next());
		if (p == null)
		{
			p = new("TrainerThinker").Init();
		}
		return p;
	}
	
	Static void TrackDemon(String _classname, Bool _shiny, String _balltype)
	{
		CaughtInfo Catch = new("caughtinfo");
		
		Catch.ActorClass = _classname;
		Catch.shiny = _shiny;
		Catch.balltype = _balltype;
		
		let tracker = TrainerThinker.get();
		tracker.CaughtList.push(Catch);
		
		console.printf('' .. _shiny);
	}
	
	Static void PurgeDemons()
	{
		let tracker = TrainerThinker.get();
		
		for (int i = 0; i < tracker.CaughtList.Size(); ++i)
		{
			CaughtInfo info = tracker.CaughtList[i];
			
			if (info.isOut)
			{
				if (info.SentDemon.health > 0)
				{
					info.isOut = false;
					info.SentDemon.destroy();
				} else {
					tracker.CaughtList.delete(i);
				}
			}
		}
		
		tracker.CaughtList.ShrinkToFit();
	}
}