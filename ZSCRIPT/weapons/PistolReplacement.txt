Class GHAGPistolOverlay : Ammo
{
	Default
	{
		Inventory.MaxAmount 4;
		Inventory.pickupMessage "Found an extra pistol!";
	}
	
	override void beginplay()
	{
		super.beginPlay();
		
		if (GameInfo.GameType == 2) Self.MaxAmount = 2;
	}
}
Class GHAGPistol : Pistol replaces Pistol
{

	Default
	{
		Weapon.SlotNumber 2;
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Tag "9mm Pistol";
	}
	
	int lastRNG;
	double spread;
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		spread = 0;
	}
	
	override void tick()
	{
		Super.Tick();
		
		setTag(Cvar.findCvar("PistolName").getString());
	}
	
	int getPistolCount()
	{
		return owner.countInv('GHAGPistolOverlay') * (owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
	}

	states
	{
		Ready:
			HAND A 1 {
				Invoker.AmmoUse2 = invoker.getPistolCount();
				A_WeaponReady();
				A_OverlayPistols();
			}
			Loop;
		Deselect:
			HAND A 1 {
				A_Lower();
				A_OverlayPistols();
			}
			Loop;
		Select:
			HAND A 1 {
				A_Raise();
				A_OverlayPistols();
			}
			Loop;
		Fire:
			HAND AB 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3, true));
			}
			HAND C 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
			}
			HAND D 3 {
				A_FireBullets(Gardevoir(self).GetAccuracyModifier(4.3), Gardevoir(self).GetAccuracyModifier(4.3), 1, 8, "BulletPuff");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_SetTics(Gardevoir(self).GetTicModifier(3));
				A_OverlayPistols(true);
			}
			HAND EF 1 A_SetTics(Gardevoir(self).GetTicModifier(1, true));
			HAND G 5
			{
				A_SetTics(Gardevoir(self).GetTicModifier(5, true));
				A_ReFire();
			}
			Goto Ready;
		AltFire:
			HAND ABC 1;
			HAND D 1 
			{
				A_FireBullets(3.4 + invoker.spread, 3.4 + (invoker.spread / 2), Min(4, invoker.getPistolCount()), 8, "BulletPuff");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_OverlayPistols(true, true);
				invoker.spread += 0.2;
				invoker.spread = min(10, invoker.spread);
			}
			TNT1 A 0
			{
				A_Refire();
			}
			HAND EFG 1;
			TNT1 A 0 
			{
				invoker.spread = 0;
			}
			Goto Ready;
		Fire.Overlay:
			PIST B 2 Bright A_SetTics(Gardevoir(self).GetTicModifier(2));
			PIST A 100;
			stop;
		AltFire.Overlay:
			PIST B 2 Bright;
		Select.Overlay:
			PIST A 1;
			loop;
		Deselect.Overlay:
			PIST A 1;
			loop;
		Ready.Overlay:
			PIST A 1;
			loop;
	}
	
	Action void A_OverlayPistols(bool RollForFire = false, bool AltFire = false)
	{
		int rng = random(0, (Min(invoker.getPistolCount() - 1, 3)));
		if (invoker.getPistolCount() > 1 && rng == invoker.lastRNG) 
		{
			while (rng == invoker.lastRNG)
			{
				rng = random(0, (invoker.getPistolCount() - 1));
			}
		}
		
		invoker.lastRNG = rng;
		
		for (int i = 0; i < invoker.getPistolCount(); ++ i)
		{
			if (i > 3) return;
			
			int layer = -1 * (i + 1);
			if (i == rng && RollForFire || altFire) {
				if (!altfire) A_Overlay(layer, "Fire.Overlay", false);
				else A_Overlay(layer, "AltFire.Overlay", false);
			}
			else A_Overlay(layer, "Ready.Overlay", false);
			A_OverlayFlags(layer, PSPF_ADDBOB, false);
			if ((i + 1) % 2 == 0) A_OverlayFlags(layer, PSPF_FLIP | PSPF_MIRROR, true);
			A_OverlayOffset(layer, (sin(gametic + (72 * i))) + (45 * (i / 2)) + 30, (cos(gametic + (72 * i))) - (10 * (i / 2)), WOF_INTERPOLATE);
		}
	}
}