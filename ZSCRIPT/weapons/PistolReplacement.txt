Class GHAGPistolOverlay : Ammo
{
	Default
	{
		Inventory.MaxAmount 4;
		Inventory.pickupMessage "Found an extra pistol!";
	}
}

class GHAGMag : CustomInventory replaces Clip
{
	default {
		Inventory.PickupMessage "Picked up a magazine.";
		Inventory.Amount 10;
		inventory.pickupsound "misc/w_pkup";
	}
	
	override bool TryPickup(Actor toucher)
	{
		let gardie = Gardevoir(Players[consoleplayer].mo);
		
		for (let probe = gardie.Inv; probe != NULL; probe = probe.Inv)
		{
			let item = Clip(probe);
			if (item) {
				if (gardie.countinv('clip') >= item.maxamount) return false;
				else {
					if (gardie.countinv("GHAGPistol") == 0)
					{
						gardie.giveInventory("GHAGPistol", 1);
						gardie.giveInventory("GHAGPistolOverlay", 1);
						gardie.A_SelectWeapon("GHAGPistol");
					}
					gardie.giveInventory("Clip", self.amount);
					GoAwayAndDie();
				}
			}
		}
		return true;
	}
	
	States
	{
		Spawn :
			CLIP A -1;
			Stop;
	}
}

class GHAGBulletBox : GHAGMag replaces ClipBox
{
	default {
		Inventory.PickupMessage "$GOTCLIPBOX";
		Inventory.Amount 50;
		inventory.pickupsound "misc/w_pkup";
	}
	States
	{
		Spawn :
			AMMO A -1;
			Stop;
	}
}

Class GHAGPistol : Pistol replaces Pistol
{

	Default
	{
		Weapon.SlotNumber 2;
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Tag "9mm Pistol";
	}
	
	int lastRNG;
	double spread;
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		spread = 0;
	}

	states
	{
		Ready:
			HAND A 1 {
				Invoker.AmmoUse2 = countinv("GHAGPistolOverlay");
				A_WeaponReady();
				A_OverlayPistols();
			}
			Loop;
		Deselect:
			HAND A 1 {
				A_Lower();
				A_OverlayPistols();
			}
			Loop;
		Select:
			HAND A 1 {
				A_Raise();
				A_OverlayPistols();
			}
			Loop;
		Fire:
			HAND AB 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3, true));
			}
			HAND C 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3, false));
			}
			HAND D 3 {
				A_FireBullets(Gardevoir(self).GetAccuracyModifier(5.6), Gardevoir(self).GetAccuracyModifier(5.6), 1, 8, "BulletPuff");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_SetTics(Gardevoir(self).GetTicModifier(3));
				A_OverlayPistols(true);
			}
			HAND EF 1 A_SetTics(Gardevoir(self).GetTicModifier(1, true));
			HAND G 5
			{
				A_SetTics(Gardevoir(self).GetTicModifier(5, true));
				A_ReFire();
			}
			Goto Ready;
		AltFire:
			HAND ABC 1;
			HAND D 1 
			{
				A_FireBullets(3.4 + invoker.spread, 3.4 + (invoker.spread / 2), Min(4, countinv("GHAGPistolOverlay")), 8, "BulletPuff");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_OverlayPistols(true, true);
				A_Refire();
				invoker.spread += 0.5;
				invoker.spread = min(6.6, invoker.spread);
			}
			HAND EFG 1;
			TNT1 A 0 
			{
				invoker.spread = 0;
			}
			Goto Ready;
		Flash:
			TNT1 A 0;
			Goto LightDone;
		Fire.Overlay:
			PIST B 2 Bright A_SetTics(Gardevoir(self).GetTicModifier(2));
		AltFire.Overlay:
			PIST B 2 Bright;
		Select.Overlay:
			PIST A 1;
			loop;
		Deselect.Overlay:
			PIST A 1;
			loop;
		Ready.Overlay:
			PIST A 1;
			loop;
	}
	
	Action void A_OverlayPistols(bool RollForFire = false, bool AltFire = false)
	{
		int rng = random(0, Min((CountInv("GHAGPistolOverlay") - 1), 3));
		if (countInv("GHAGPistolOverlay") > 1 && rng == invoker.lastRNG) 
		{
			while (rng == invoker.lastRNG)
			{
				rng = random(0, (CountInv("GHAGPistolOverlay") - 1));
			}
		}
		
		invoker.lastRNG = rng;
		
		for (int i = 0; i < CountInv("GHAGPistolOverlay"); ++ i)
		{
			if (i > 3) return;
			
			int layer = -1 * (i + 1);
			if (i == rng && RollForFire || altFire) {
				if (!altfire) A_Overlay(layer, "Fire.Overlay", false);
				else A_Overlay(layer, "AltFire.Overlay", false);
			}
			else A_Overlay(layer, "Ready.Overlay", true);
			A_OverlayFlags(layer, PSPF_ADDBOB, false);
			if ((i + 1) % 2 == 0) A_OverlayFlags(layer, PSPF_FLIP | PSPF_MIRROR, true);
			A_OverlayOffset(layer, (sin(gametic + (72 * i))) + (45 * (i / 2)) + 30, (cos(gametic + (72 * i))) - (10 * (i / 2)), WOF_INTERPOLATE);
		}
	}
}