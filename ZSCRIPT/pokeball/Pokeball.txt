Class PokeBallGun : Weapon
{

	Actor TargetDemon;
	
	Default
	{
		Weapon.SlotNumber 9;
		Tag "Pokeball";
	}
	
	states 
	{
		Select:
			HAND A 1 A_Raise();
			Loop;
		Deselect:
			HAND A 1 A_Lower();
			Loop;
		Ready:
			HAND A 1 A_WeaponReady();
			Loop;
		Fire:
			HAND D 8 A_ThrowBall();
			HAND D 1 A_Refire();
			goto Ready;
	}
	
	override void Tick()
	{
		Super.tick();
		
	}	
	
	Action void A_ThrowBall()
	{
		let _locBall = SpawnPlayerMissile("GreatBallProj", angle);
	}
}

Class PokeBallCaughtGun : Weapon
{
	int demoncycle;
	bool hasEmptyParty;

	Default
	{
		Weapon.SlotNumber 0;
	}
	states 
	{
		Select:
			HAND A 1 A_Raise();
			Loop;
		Deselect:
			HAND A 1 A_Lower();
			Loop;
		Ready:
			TNT1 A 0 A_GetDemonInfo();
		ReadyLoop:
			HAND A 1 A_WeaponReady();
			Loop;
		Fire:
			HAND D 8 A_ThrowBall();
			HAND D 1 A_Refire();
			goto Ready;
	}
	
	Action Void A_GetDemonInfo()
	{
		let tracker = TrainerThinker.get();
		
		if (tracker.CaughtList.size() == 0) {
			invoker.SetTag("No useable demons!");
			invoker.hasEmptyParty = true;
			invoker.demonCycle = -1;
			return;
		} else {
			
			invoker.demoncycle = 0;
			
			for (int i = 0; i < tracker.CaughtList.size(); ++i)
			{
			
				CaughtInfo c_info = tracker.caughtList[i];
				
				if (c_info.isOut) continue;
				else {
					invoker.demonCycle = i;
					invoker.hasEmptyParty = false;
					invoker.SetTag(c_info.ActorClass);
					return;
				}
			}
			
			invoker.SetTag("No useable demons!");
			invoker.hasEmptyParty = true;
			invoker.demonCycle = -1;
			return;
		}
	}
	
	Action void A_ThrowBall()
	{
		let tracker = TrainerThinker.get();
		
		if (tracker.CaughtList.size() == 0) return;
		
		let info = CaughtInfo(tracker.CaughtList[invoker.demoncycle]);
		
		FLineTraceData blast;
		LineTrace(angle, 2048, pitch, 0, height - 12, 0, 0, blast);
		
		let MyDemon = Actor.spawn(info.ActorClass, blast.hitlocation);
		myDemon.bFriendly = true;
		info.isOut = true;
		info.SentDemon = MyDemon;
		info.SentDemon.A_SetTranslation("none");
		if (info.shiny) {
			GHAGEventHandler.SetShinyDemon(MyDemon);
		}
	}
}

Class PokeBallProj : Actor
{
	int shakes;
	int prevHeight;
	String CaughtType;
	Property CaughtType: CaughtType;
	
	default
	{
		+Missile;
		+HitTarget;
		+BounceOnWalls;
		+BounceOnFloors;
		+BounceOnCeilings;
		+BounceAutoOff;
		Speed 50;
		PokeBallProj.CaughtType "PokeBallPickup";
	}
	
	states
	{
		Spawn:
			PBAL A 1;
			Loop;
		Death:
			#### A 0 A_JumpIf(Invoker.target, "TryToCatch");
			Stop;
		TryToCatch:
			#### A 0 {
				if (target) {
					if (!target.bFriendly) {
						invoker.bNoGravity = true;
						A_NoBlocking();
						A_FreezeTarget();
						return resolveState(null);
					}
				}
				return resolveState("BreakBall");
			}
			#### CD 4;
		WaitLoop:
			#### D 1 A_JumpIf(A_Shrink(), "Fall");
			Loop;
		Fall:
			#### DC 4;
			#### B 35;
		ShakeShakeShake :
			#### B 8;
			#### B 0 A_JumpIf(A_RollForCatch(), "FailCatch");
			#### B 0 A_StartSound("pokeball/Shake", CHAN_BODY);
			#### B 0 A_JumpIf(invoker.shakes % 2 == 0, "ShakeLeft");
		ShakeRight:
			#### BFB 4;
			#### B 4 A_JumpIf(A_CheckIfCaught(), "Caught");
			goto ShakeShakeShake;
		ShakeLeft:
			#### BEB 4;
			#### B 4 A_JumpIf(A_CheckIfCaught(), "Caught");
			goto ShakeShakeShake;
		FailCatch:
			#### GH 4;
		FailReleaseLoop :
			#### h 1 A_JumpIf(A_Grow(), "BreakBall");
			loop;
		BreakBall:
			#### A 0;
			stop;
		Caught:
			#### A 0
			{
				A_StartSound("pokeball/Latch", CHAN_BODY);
				Let CaughtBall = PokeBallPickup(Self.Spawn(Invoker.CaughtType, Self.pos));
				if (!target || !CaughtBall) return;
				
				CaughtBall.ClassName = Target.getClassName();
				CaughtBall.quickStore = Target;
				CaughtBall.Shiny = false;
				let tracker = ActorTrackerThinker.get();
		
				if (tracker.infolist.find(target) != tracker.infolist.size())
				{
					ActorInfo stats = tracker.infolist[tracker.infolist.find(target)];
					if (stats.shiny) CaughtBall.shiny = true;
				}
				target.tics = 99999999;
				target.bKilled = true;
				self.destroy();
			}
		CaughtLoop:
			#### B 1 Bright;
			loop;
			
	}
	
	Action void A_FreezeTarget()
	{
		if (Gardevoir(invoker.target) || PokeBallProj(invoker.target) || !invoker.target.bIsMonster)
		{
			Self.Destroy();
			return;
		}
		
		if (WolfensteinSS(invoker.target))
		{
			invoker.target.A_Explode();
			Self.destroy();
			return;
		}
		
		let target = Invoker.target;
		
		Target.tics = 99999;
		Target.A_SetRenderStyle(1, STYLE_Stencil);
		Target.SetShade("FF0000");
		Target.A_SetInvulnerable();
		Target.A_NoBlocking(false);
		invoker.prevHeight = Target.height;
		target.height = 0;
	}
	
	Action bool A_Shrink()
	{
		let target = Invoker.target;
		if (target.scale.x > 0.1)
		{
			target.A_SetScale(Target.scale.x - 0.05);
			return false;
		} else {
			Target.A_SetRenderStyle(1, STYLE_None);
			invoker.bNoGravity = false;
			return true;
		}
	}
	
	Action Bool A_Grow()
	{
		let target = Invoker.target;
		
		if (target.scale.x <= 1)
		{
			target.A_SetScale(target.scale.x + 0.05);
		} 
		else 
		{
			Vector3 setpos = Target.pos;
			setpos.z = Target.height;
			SetOrigin(setpos, false);
			Target.A_SetScale(1);
			Target.A_SetRenderStyle(1, STYLE_Normal);
			Target.SetStateLabel("See");
			Target.A_UnSetInvulnerable();
			Target.bSolid = true;
			target.height = invoker.prevHeight;
			return true;
		}
		
		return false;
	}
	
	Action bool A_CheckFloor()
	{
		return invoker.pos.z <= (invoker.floorz + 5);
	}
	
	Action bool A_RollForCatch()
	{
		bool roll = invoker.ShakeFunction();
		if (roll) 
		{
			invoker.shakes += 1;
			return false;
		}
		else {
			Target.A_SetRenderStyle(1, STYLE_Stencil);
			Target.SetShade("FF0000");
			return true;
		}
	}
	
	Action bool A_CheckIfCaught()
	{
		return invoker.shakes == 3;
	}
	
	virtual bool ShakeFunction()
	{
		let tracker = ActorTrackerThinker.get();
		
		if (tracker.infolist.find(target) != tracker.infolist.size())
		{
			int N = random(0, 255);
		
			ActorInfo stats = tracker.infolist[tracker.infolist.find(target)];
			
			if ((stats.paralyzed || stats.burned) && N <= 12) return true;
			if (stats.frozen && N <= 25) return true;
		}
		
		int M  = random(0, 255);
		
		int numerator = Target.spawnHealth() * 255 * 4;
		int denominator = Target.health * 12;
		int F = numerator / denominator;
		
		if (F >= M) return true;
		
		return false;
	}
}

Class PokeBallPickup : CustomInventory
{
	Actor quickStore;
	string ClassName;
	bool shiny;
	String CaughtType;
	Property CaughtType: CaughtType;
	
	default
	{
		Inventory.PickupMessage "Caught a wild demon!";
		Inventory.amount 1;
		Inventory.MaxAmount 999;
		PokeBallPickup.CaughtType "PokeBall";
	}
	
	states
	{
		Spawn:
			PBAL A 0;
			goto Spawn.Flashing;
		Spawn.Flashing:
			#### IJKL 4 Bright;
			#### MN 8;
			Loop;
		Pickup:
			TNT1 A 0
			{
				invoker.quickStore.health = 0;
				invoker.quickStore.A_BossDeath();
				TrainerThinker.trackdemon(invoker.ClassName, invoker.shiny, invoker.CaughtType);
			}
			stop;
			
	}
}

Class GreatBallProj : PokeBallProj
{
	default
	{
		PokeBallProj.CaughtType "GreatBallPickup";
	}
	
	States
	{
		Spawn:
			GBAL A 1;
			loop;
	}
	
	override bool ShakeFunction()
	{
	
		return true;
	
		let tracker = ActorTrackerThinker.get();
		
		if (tracker.infolist.find(target) != tracker.infolist.size())
		{
			int N = random(0, 200);
		
			ActorInfo stats = tracker.infolist[tracker.infolist.find(target)];
			
			if ((stats.paralyzed || stats.burned) && N <= 12) return true;
			if (stats.frozen && N <= 25) return true;
		}
		
		int M  = random(0, 255);
		
		int numerator = Target.spawnHealth() * 255 * 4;
		int denominator = Target.health * 8;
		int F = numerator / denominator;
		
		if (F >= M) return true;
		
		return false;
	}
}

Class GreatBallPickup : PokeBallPickup
{
	default
	{
		PokeBallPickup.CaughtType "GreatBall";
	}
	
	states
	{
		Spawn:
			GBAL A 0;
			goto Spawn.Flashing;
	}
}

Class UltraBallProj : PokeBallProj
{

}

Class MasterBallProj : PokeBallProj
{

}

class PokeBallAmmo : Ammo
{
	default
	{
		Inventory.MaxAmount 255;
		Inventory.PickupMessage "Found a Pokeball!";
	}
}

class GreatBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "Found a GreatBall! Quite nice!";
	}
}

class UltraBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "Found an UltraBall! Awesome!";
	}
}

class MasterBallAmmo : PokeBallAmmo
{
	default
	{
		Inventory.PickupMessage "The lottery smiles in your favor! Found a MasterBall!";
	}
}
