Enum StatusType
{
	NONE = 0,
	FROZEN = 1,
	BURNED = 2,
	PARALYZED = 4,
}

Class ActorInfo : Object
{
	Actor owner;
	Actor Effect;
	int damage;
	int prevPainValue;
	int prevTicValue;
	bool frozen;
	bool Burned;
	bool Paralyzed;
	bool confused;
	bool dead;
}

Class ActorTrackerThinker : Thinker
{
	Array<ActorInfo> Infolist;
	Array<Actor> Actors;

	ActorTrackerThinker Init()
	{
		ChangeStatNum(STAT_INFO);
		
		Infolist.clear();
		Actors.clear();
		
		return self;
	}
	
	static ActorTrackerThinker Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("ActorTrackerThinker",STAT_INFO);
		let p = ActorTrackerThinker(it.Next());
		if (p == null)
		{
			p = new("ActorTrackerThinker").Init();
		}
		return p;
	}
}

Class ActorTracker : EventHandler
{
	static void TrackThing(Actor thing, StatusType Status, int Damage = 0) 
	{
		if (!thing) return;
	
		let tracker = ActorTrackerThinker.get();
		if (!tracker) return;
	
		int index = tracker.Actors.find(thing);
		if (index == tracker.Actors.size()) 
		{
			tracker.Actors.push(thing);
			
			let tempeffect = new("ActorInfo");
			tempeffect.owner = thing;
			tempeffect.damage = 0;
			tempeffect.frozen = false;
			tempeffect.burned = false;
			tempeffect.paralyzed = false;
			tempeffect.confused = false;
			tempeffect.dead = false;
			tempeffect.prevPainValue = thing.painchance;
			tempeffect.prevTicValue = 0;
			
			tracker.Infolist.push(tempeffect);
			
			index = tracker.Actors.find(thing);
		}
		ActorInfo info = tracker.Infolist[index];
		
		info.damage += Damage;
		
		//One status effect at a time
		if (info.frozen || info.burned || info.paralyzed || info.confused) 
		{
			
		}
		else
		{
			if (Status & FROZEN) 
			{
				if (!info.frozen) {
					thing.tics = 9999999; //actor won't thaw if set to -1
					info.frozen = true;
					info.owner.painchance = 0;
					info.effect = thing.spawn("StatusEffect");
					float scale = thing.radius / 28;
					info.effect.A_SetScale(scale, scale);
					info.effect.SetStateLabel("Frozen");
					info.effect.target = thing;
				}
			}
			if (Status & BURNED)
			{
				if (!info.burned) {
					info.burned = true;
					info.effect = thing.spawn("StatusEffect");
					float scale = thing.radius / 15;
					info.effect.A_SetScale(scale * -1, scale);
					info.effect.SetStateLabel("Burned");
					info.effect.target = thing;
					if (thing.health > 0) {
						thing.setStateLabel("Pain");
						thing.damagemobj(players[consoleplayer].mo, players[consoleplayer].mo, int(thing.spawnhealth() / 16), "Fire");
					}
				}
			}
			if (Status & PARALYZED)
			{
				if (!info.paralyzed) {
					info.paralyzed = true;
					info.effect = thing.spawn("StatusEffect");
					float scale = thing.radius / 34;
					info.effect.A_SetScale(scale, scale);
					info.effect.SetStateLabel("Paralyzed");
					info.effect.target = thing;
					if (thing.health > 0) {
						thing.setStateLabel("Pain");
						thing.tics *= 2;
					}
				}
			}
		}
	}
	
	static ActorInfo getActorStats(Actor thing)
	{
		let tracker = ActorTrackerThinker.get();
		if (!tracker) return null;
	
		if (tracker.Actors.find(thing) == tracker.Actors.Size()) return null;
		else return tracker.Infolist[tracker.Actors.find(thing)];
	}
	
	override void WorldTick()
	{
		let tracker = ActorTrackerThinker.get();
		if (!tracker) return;
	
		for (int i = 0; i < tracker.Infolist.size(); ++i)
		{
			ActorInfo info = tracker.Infolist[i];
			
			if (info.dead) continue;
			
			Actor thing = info.owner;
			if (!thing) return;
			if (thing.health <= 0 || thing.tics <= -1)
			{
				info.dead = true;
				
				if (info.frozen) thing.bIceCorpse = true;
				
				//force extra dead effect here just to make sure the actor
				//doesn't show unwanted Infolist
				continue;
			}
			
			if (info.frozen) 
			{
			
				if (gametic % (35 * 2) == 0)
				{
					int rng = random(1, 100);
					if (rng <= 10) {
						info.frozen = false;
						if (thing.health > 0) thing.setStateLabel("See");
						info.effect.destroy();
					} else {
					
					}
				}
			}
			
			if (info.burned) 
			{
				if (gametic % (35 * 2) == 0)
				{
					int rng = random(1, 100);
					if (rng <= 10) {
						info.burned = false;
						info.effect.Destroy();
					} else {	
						thing.damagemobj(players[consoleplayer].mo, players[consoleplayer].mo, int(thing.spawnhealth() / 16), "Fire");
						if (thing.health > 0) thing.SetStateLabel("Pain");
						info.effect.SetStateLabel("Burned");
					}
				}
			}
			
			if (info.paralyzed)
			{
				if (info.prevTicValue < thing.tics)
				{
					thing.tics *= 2;
				}
				info.prevTicValue = thing.tics;
				
				if (gametic % (35 * 2) == 0)
				{
					int rng = random(1, 100);
					if (rng <= 10) {
						info.paralyzed = false;
						info.effect.destroy();
					} else {
						info.effect.SetStateLabel("Paralyzed");
						if (thing.health > 0) {
							thing.setStateLabel("Pain");
							thing.tics *= 2;
						}
					}
				}
			}
		}
	}
}