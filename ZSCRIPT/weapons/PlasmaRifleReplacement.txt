Class GHAGPlasmaOverlay : Inventory
{
	Default
	{
		Inventory.MaxAmount 4;
		Inventory.pickupMessage "Found an extra plasma rifle!";
	}
	
	override void beginplay()
	{
		super.beginPlay();
		
		if (GameInfo.GameType == 2) Self.MaxAmount = 2;
	}
}

Class GHAGPlasmaRifle : GHAGWeapon
{
	default {
		Weapon.SlotNumber 6;
		Tag "Generic Energy Weapon";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.AmmoUse1 1;
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void Tick()
	{
		Super.tick();
		
		setTag(Cvar.findCvar("PlasmaName").getString());
	}	
	
	int getPlasmaCount()
	{
		return owner.countInv('GHAGPlasmaOverlay') * (owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
	}
	
	States
	{
		Select:
			HAND A 1 {	
				A_Raise();
				A_PlasmaOverlay();
			}
			loop;
		Deselect:
			HAND A 1 {
				A_Lower();
				A_PlasmaOverlay();
			}
			loop;
		Ready:
			HAND A 1 {
				A_WeaponReady(WRF_ALLOWUSER1);
				A_PlasmaOverlay();
				return resolveState(null);
			}
			loop;
		Fire:
			HAND A 1 Bright {
				if (GameInfo.GameType != 1) {
					A_StartSound("plasma/fire", CHAN_AUTO);
				}
				A_PsychicPlasma();
				A_PlasmaOverlay(true);
			}
			HAND BC 1 Bright;
			HAND DE 1 A_Refire();
			Goto Ready;
		AltFire:
			HAND A 20 {
				A_PlasmaOverlay(false, true);
				A_BFGSound();
				Invoker.AmmoUse2 = int(40 / invoker.getPlasmaCount());
				A_SetTics(int(20 / invoker.getPlasmaCount()));
			}
			HAND A 10;
			TNT1 A 0 A_FireBFG();
			HAND BCDE 2;
			HAND A 12;
			HAND A 20 A_Refire();
			goto Ready;
		Plasma.Overlay :
			PLSM ABCDE 1;
			loop;
		PlasmaFire.Overlay:
			PLSM PBCDE 1 Bright;
			stop;
		PlasmaBFG.Overlay :
			PLSM FGHIJKLMNO 3 Bright A_SetTics(max(3 - invoker.getPlasmaCount(), 2));
			goto Plasma.Overlay;
	}
	
	Action void A_PlasmaOverlay(bool _primary = false, bool _bfg = false)
	{
		for (int i = 0; i < invoker.getPlasmaCount(); ++ i)
		{
			int layer = -1 * (i + 1);
			if (_bfg) A_Overlay(layer, "PlasmaBFG.Overlay", false);
			else if (_primary) A_Overlay(layer, "PlasmaFire.Overlay", false);
			else A_Overlay(layer, "Plasma.Overlay", false);
			A_OverlayFlags(layer, PSPF_ADDBOB, false);
			if ((i + 1) % 2 == 0) A_OverlayFlags(layer, PSPF_FLIP | PSPF_MIRROR, true);
			A_OverlayOffset(layer, (sin(gametic + (72 * i))) + (45 * (i / 2)) + 30, (cos(gametic + (72 * i))) - (55 * (i / 2)) + (i < 2 ? 5 : 0), WOF_INTERPOLATE);
			
			if (invoker.owner.countInv("PowerWeaponLevel2") >= 1)
			{
				int realCount = int(invoker.getPlasmaCount() / 2);
				if (i + 1 > realcount)
				{
					A_OverlayFlags(layer, PSPF_RENDERSTYLE, true);
					A_OverlayRenderstyle(layer, STYLE_SoulTrans);
					A_OverlayAlpha (layer, 0.25);
				}
			}
		}
		
		int layerStart = invoker.getPlasmaCount() * -1;
		A_ClearOverlays(-10, layerStart - 1);
	}
	
	Action void A_PsychicPlasma() {
		for (int i = 0; i < invoker.getPlasmaCount(); ++i)
		{
			if (player == null)
			{
				return;
			}
			int gun = i + 1;
			int x = 15;
			if (gun == 2) x = -15;
			else if (gun == 3) x = 20;
			else if (gun == 4) x = -20;
			let _locPlasma = PlasmaBall(A_FireAimedProjectile("PlasmaBall", i == 0 ? true : false, x, gun > 2 ? 12 : 5));
		}
	}
	
	action Actor A_FireAimedProjectile(class<Actor> missiletype, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0)
	{
		let misl = A_FireProjectile(missiletype, 0, useammo, spawnofs_xy, spawnheight, flags, 0);
		if (misl)
		{
			FLineTraceData data;
			Vector3 end;
			bool hit = LineTrace(angle, PLAYERMISSILERANGE, pitch, TRF_SOLIDACTORS|TRF_THRUHITSCAN, player.viewz-pos.z, data: data);
			if (hit && data.hitType != TRACE_CrossingPortal)
				end = (pos.xy, player.viewz) + (AngleToVector(angle,cos(pitch)), -sin(pitch)) * data.distance;
			else
				end = (pos.xy, player.viewz) + (AngleToVector(angle,cos(pitch)), -sin(pitch)) * PLAYERMISSILERANGE;
        
			Vector3 spawnPos = (pos.xy, misl.pos.z);
			if (spawnofs_xy)
				spawnPos.xy = pos.xy + AngleToVector(angle-90)*spawnofs_xy;
        
			Vector3 diff = end - spawnPos;
			double l = diff.Length();
			if (l > 0)
			{
				diff /= l;
				misl.angle = atan2(diff.y, diff.x);
				misl.pitch = -asin(diff.z);
				misl.vel = diff * misl.vel.Length();
			}
		}
    
		return misl;
	}
}