Class GHAGRocketAmmo : CustomInventory replaces RocketAmmo 
{
	default {
		Inventory.pickupmessage "Found a piece of ordnance!";
		Inventory.pickupsound "misc/w_pkup";
		Inventory.amount 1;
	}
	
	override bool TryPickup(Actor toucher)
	{
		let gardie = Gardevoir(Players[consoleplayer].mo);
		
		for (let probe = gardie.Inv; probe != NULL; probe = probe.Inv)
		{
			let item = RocketAmmo(probe);
			if (item) {
				if (gardie.countinv('rocketammo') >= item.maxamount) return false;
				else {
					if (gardie.countinv("GHAGRocketLauncher") == 0) {
						gardie.A_GiveInventory("GHAGRocketLauncher", 1);
						if (!gardie.chargingBlackHole) gardie.A_SelectWeapon("GHAGRocketLauncher");
					}
					gardie.A_GiveInventory("RocketAmmo", self.amount);
				}
			}
		}
		GoAwayAndDie();
		return true;
	}
	
	States
	{
		Spawn:
			ROCK A -1;
			Stop;
	}
}

Class GHAGRocketBox : GHAGRocketAmmo replaces RocketBox 
{
	default {
		inventory.pickupmessage "Found a box of ordnance!";
		inventory.pickupsound "misc/w_pkup";
		Inventory.Amount 5;
	}
	States
	{
		Spawn:
			BROK A -1;
			Stop;
	}
}

Class GHAGRocketLauncher : RocketLauncher
{
	default {
		Weapon.AmmoGive 0;
		Weapon.SlotNumber 5;
		+Weapon.NoAlert;
		Tag "Explodey";
		GHAGRocketLauncher.maxRockets 6;
	}
	
	NameClass names;
	
	int maxRockets;
	property maxRockets: maxRockets;
	int queuedRockets;
	Array<Int> rocketTracker;
	
	override void BeginPlay()
	{
		super.BeginPlay();
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void tick()
	{
		super.tick();
	}
	
	string getRNGName() {
		return self.names.GetName();
	}

	States {
		Ready:
			TNT1 A 0 {
				invoker.queuedRockets = 0;
				A_ResetTracker();
				A_OverlaySpin();
			}
		Ready.Speen:
			HAND I 3 {
				invoker.queuedRockets = 0;
				A_ResetTracker();
				A_WeaponReady();
				A_OverlaySpin();
			}
			Loop;
		Deselect:
			HAND I 1 {
				A_Lower();
				A_OverlaySpin();
			}
			Loop;
		Select:
			HAND I 1 {
				A_Raise();
				A_OverlaySpin();
			}
			Loop;
		Fire:
			TNT1 A 0 {
				A_Overlay(2, "Clear");
				A_AlertMonsters();
			}
			RCKF ABCD 2;
			RCKF E 2 A_PsychicMissile();
			RCKF FG 2;
			TNT1 A 0 A_JumpIf(!countinv("RocketAmmo"), 'Ready');
			TNT1 A 0 A_SetNewTagName();
			RCKF HIJKLM 1;
			TNT1 A 0 A_ReFire();
			goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(!countinv('rocketammo'), 'Ready');
			TNT1 A 0
			{
				if (invoker.queuedRockets < invoker.maxRockets && countInv("RocketAmmo") > 1)
				{
					A_TakeInventory("RocketAmmo", 1);
					invoker.queuedRockets += 1;
				}
			}
			HAND IIIIIIIIII 1 {
				A_OverlaySpin();
				A_AnimateQueuedRockets();
			}
			TNT1 A 0 A_Refire();
		AltFire.AirStrike:
			TNT1 A 0 {
				A_Overlay(2, "Clear");
				A_AlertMonsters();
			}
			RCKF ABCDEFG 2;
			RCKF G 4 {
				A_PsychicMissile();
				A_SetNewTagName();
			}
		AltFire.RocketLoop:
			RCKF G 4 {
				if (invoker.queuedRockets > 0)
				{
					if (countInv("RocketAmmo")) A_PsychicMissile();
					A_SetNewTagName();
					int layer = A_GetRandomLayer();
					A_Overlay(layer, "Clear");
				}
			}
			TNT1 A 0 
			{
				if (invoker.queuedRockets > 0)
				{
					invoker.queuedRockets -= 1;
					return resolveState('AltFire.RocketLoop');
				}
				else 
				{
					A_ResetTracker();
					if (countInv("RocketAmmo")) A_TakeInventory("RocketAmmo", 1);
					if (countInv('RocketAmmo') == 0) {
						A_Overlay(2, "Clear");
						return resolveState('Ready');
					}
					return resolveState(null);
				}
			}
			RCKF HIJKLM 1;
			goto Ready;
		RocketQueue:
			SPEN A 3;
			stop;
		Speeen:
			SPEN A 3;
			Loop;
		Clear:
			stop;
	}
	
	action void A_OverlaySpin()
	{
		if (countInv("RocketAmmo")) {
			A_Overlay(2, "Speeen", true);
			A_OverlayScale(2, 0.8);
			A_OverlayPivot(2);
			A_OverlayRotate(2, 25, WOF_ADD);
			A_OverlayFlags(2, PSPF_ADDBOB, false);
			A_OverlayOffset(2, sin(gametic * 2) / 13, cos(gametic * 2) / 11, WOF_ADD | WOF_INTERPOLATE);
		}
	}
	
	action int A_GetRandomLayer()
	{
		int layer = 0;
		while (true)
		{
			layer = random(0, invoker.maxRockets - 1);
			if (invoker.rocketTracker[layer] != 0)
			{
				invoker.rocketTracker[layer] = 0;
				return (3 + layer) * -1;
			}
		}
		return -1;
	}
	
	action void A_ResetTracker()
	{
		invoker.rocketTracker.resize(invoker.maxRockets);
		for (int i = 0; i < invoker.maxRockets; ++i)
		{
			invoker.rocketTracker[i] = 0;
		}
	}
	
	action void A_AnimateQueuedRockets()
	{
		for (int i = 0; i < invoker.queuedRockets; ++i)
		{
			A_Overlay((3 + i) * -1, "Speeen");
			int ypos = ++invoker.rocketTracker[i];
			ypos = min(10, ypos);
			A_OverlayFlags((3 + i) * -1, PSPF_ADDBOB, false);
			A_OverlayPivot((3 + i));
			A_OverlayRotate((3 + i), 25, WOF_ADD);
			int xpos = i % 2 != 0 ? -160 : 20;
			int order = int(i / 2);
			if (order >= 1)
			{
				xpos += (order * 60) * (i % 2 == 0 ? 1 : -1);
				ypos += 20 * order;
			}
			A_OverlayOffset((3 + i) * -1, xpos, 75 - ypos, WOF_ADD | WOF_INTERPOLATE);
		}
	}
	
	action void A_SetNewTagName() 
	{
		if (!Invoker.names) Invoker.names = NameClass(Spawn("NameClass"));
		Invoker.setTag(Invoker.names.getName());
	}
	
	action void A_PsychicMissile() 
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		let _locRocket = PsychicRocket(SpawnPlayerMissile("PsychicRocket"));
		if (_locRocket) {
			_locRocket.Vel3DFromAngle(20 + (44 * Gardevoir(self).GetRageModifier()), Gardevoir(self).angle, Gardevoir(self).pitch); 
			_locRocket.modifier = Gardevoir(self).GetRageModifier();
		}
	}
}

Class PsychicRocket : Rocket
{

	double modifier;
	property modifier: modifier;
	
	Default 
	{
		PsychicRocket.modifier 1;
	}

	States {
		Death:
			TNT1 A 0 A_SetScale(1 + modifier, 1 + modifier);
			MISL B 8 Bright A_Explode(100 * (1 + modifier), Max(256, 128 * (1 + modifier)), XF_HURTSOURCE | XF_THRUSTZ);
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

Class GrenadeRocket : Rocket
{
	default
	{
		//+Gravity;
	}
}

Class NameClass : Actor
{

	int getMode;
	int wordtracker;
	
	property getMode: getMode;
	property wordtracker: WordTracker;
	property names: names;
	
	default 
	{
		
		NameClass.getMode 0;
		NameClass.wordTracker 0;

	}
	
	//Your name here? Hit me up!
	static const string names[] =
	{
		"Joey", "Billy", "Kevy", "Kablooey", "Pill", "Martha", "Rachael", "Weasel", "Nash", "Emma",
		"April", "Ghost", "Kekz", "Bob", "Jimmy", "Cali", "Kesha", "Gutawer", "Marisa", "Hugo",
		"Romero", "Carmack", "Adrian", "Tom", "Sandy", "American", "Kid Mystic", "Trouble", "Peace Keeper",
		"Chocolate Thunder", "Vanilla Thunder", "Strawberry Thunder", "Pomegranate Fury", "Fuck you in particular",
		"Death from above", "Oh shit, he", "ASSHAT", "ASSCLOWN", "ASSFART", "RED", "BLUE", "GREEN", "YELLOW", "GOLD", "SILVER",
		"CRYSTAL", "Prof. Oak", "Prof. Elm", "Prof. Birch", "Prof. Rowan", "Prof. Juniper", "Prof. Sycamore", 
		"Prof. Kukui", "Prof. Magnolia", "RUBY", "SAPPHIRE", "EMERALD", "DIAMOND", "PEARL", "PLATINUM", "BLACK", 
		"WHITE", "X", "Y", "SWORD", "SHIELD", "Explosive Diplomacy", "Diplomacy", "Zero Diplomacy", "Fuck you, Baltimore!",
		"Zabivaka, no!", "BASTARD!", "I AM CALM!", "Crocket", "Screaming Eagles!", "The Original", "Stanley",
		"Pikachu", "Shirely", "Surely", "Flynn", "Dacote", "Problem Solver", "Problem Causer", "9K38 Igla", "Bitterman",
		"Rocket", "Rocket No. 524", "Rocky", "Rocky Road", "Rocky Horror", "Not a shiny", "Wonder-trade me", "Fiddlyfaddlybiddlybaddlydiddlydoodlyhiddlyhoodly",
		"Problem Maker", "Problem Deleter", "Kibbles n' bits", "Howler Head", "Dr. Pepper", "Not Safe For Self Propulsion",
		"Safe For Self Propulsion", "Death Bringer", "Funny Name", "Funny Name Here", "Made you look", "Made you explode",
		"ZScript was a mistake", "AEUHHH????", "[No]", "[Added]", "[Already In]", "[DIY]", "[Duplicate]", "[Not Needed]",
		"[Closed]", "[???!?!?!?!????]", "Icon Killer", "This one's for Daisy", "Bottled Up Rage", "Explosive Personality",
		"Explosive Diarrhea", "Bottled Up Rage", "Can of Whoop Ass", "What", "Sin Killer", "MERCILESS EXTERMINATION",
		"SPEEEN", "Merry Christmas", "Apple!", "Hey!", "Apple, hey Apple!", "Adios", "Busting makes me feel good!",
		"Ok I Love You Bye Bye", "Not funny, didn't laugh", "Frag out", "Fire in the hole!", "50 Shades of Explode",
		"50 Shades of you're dead", "50 shades of gibitude", "50 shades of death", "ZoomyPop", "Zoomie Boomies",
		"Congrats! You've won!", "NOT THE BEES!", '"Dildo Joke Here"', "Help I'm trapped in a rocket factory!",
		"Sit down, That means you Billy!", "Lil' smokey", "Ayy Pappie!", "Sparky", "Charging Charlie",
		"Mister Roger's Middle Finger", "Fandango", "The Rectifier", "Buelah", "Chumlee", "Butterface", "Gone Fission",
		"Not your dad's colonoscopy", "Bitch Slap", "The Dreaded CONE", "Bloop", "Muzzle Maggot", "Track Trolls",
		"Breach Creature", "Bore Baby", "Novacaine", "Karma", "Karma Bringer", "Wake Up Call", "Hey! Listen!",
		"I like shorts!", "Hot explosives in your area!", "Happy Accident", "Chaos... Control!", "Chaos... Swiss Roll!",
		"Creeper", "Shoutout to Simpleflips", "Lamb sauce located", "Target Acquired", "Eightball", "Going out with a bang!",
		"Liam", "Olivia", "Noah", "Oliver", "Ava", "Elijah", "Charlotte", "William", "Sophia", "James", "Jesse", "Amelia",
		"Benjamin", "Isabella", "Lucas", "Mia", "Henry", "Evelyn", "Alexander", "Harper", "Bojack", "Princess", "Nguyen",
		"Todd", "Neal McBeal", "Margo Martindale", "Peanut Butter", "Hollyhock", "Judah", "Surprise!", "PK Rocket!",
		"PSY Rocket!", "The perfect gift", "Imp Encounter", "300mb!", "Dud", "Objection!", "Hold it!", "Take that!",
		"Silence!", "Perfect IV", "Laser!", "Caution!", "Goodnight Everybody!", "Helloooooo Nurse!", "Love", "Heart",
		"Brain", "Control", "CAFFEINATE!", "Wake up!", "Smack!", "That's great", "Fuck Hexen", "What is the time?",
		"Archvile repellant", "Raw kit lawn chair", "Hydrate", "Posture check", "You", "Major Arlene", "Kaapeli", "Bridge Burner",
		"Jimmy", "You let me complicate you", "Excuse me", "Ultimate Cup of Coffee", "Try Haxe!", "Bosh", "Bish", "Chaz", "Bailey",
		"Coco", "Finn", "Perkele", "No niin"
		
	};

	static const string navyseal[] = {
		"the", "fuck", "did", "you", "just", "fucking", "say", "about", "me,", "you", "little", "bitch?"
	};
	
	static const string awman[] = {
		"Ah man", "So", "way", "back", "in", "the", "mine,", "got", "our", "pickaxe", "swingin'", "from", "side", "to", "side!"
	};
	
	static const string shorts[] = {
		"They're comfy,", "And easy to wear!"
	};
	
	static const string spacemonkey[] = {
		"It starts", "With an", "Earth", "Quake", "Birds and Snakes", "an Airplane", "and", "BILLY JOEL", "Is not afraid..."
	};
	
	static const string contempt[] = {
		"humour", "me", "greatly", "with", "your", "arrogance", "and", 'contempt,', "a", "flood", "of", "accusations", "born", "from", "the", "poison", "of", "envy", "and", "smite", "of", "disrespect."
	};
	
	string GetName() {
		
		string rng_name = '[I am error]';
		
		switch (getMode)
		{
			case 0:
				rng_name = NameClass.names[random(0, NameClass.names.size() - 1)];
				if (rng_name == "What") getMode = 1;
				if (rng_name == "Creeper") getMode = 2;
				if (rng_name == "I like shorts!") getMode = 3;
				if (rng_name == "That's great") getMode = 4;
				if (rng_name == "You") getMode = 5;
				break;
			case 1:
				rng_name = NameClass.navyseal[wordtracker];
				wordtracker += 1;
				if (rng_name == "bitch?") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 2:
				rng_name = NameClass.awman[wordtracker];
				wordtracker += 1;
				if (rng_name == "side!") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 3:
				rng_name = NameClass.shorts[wordtracker];
				wordtracker += 1;
				if (rng_name == "And easy to wear!") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 4:
				rng_name = NameClass.spacemonkey[wordtracker];
				wordtracker += 1;
				if (rng_name == "Is not afraid...") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
			case 5:
				rng_name = NameClass.contempt[wordtracker];
				wordtracker += 1;
				if (rng_name == "disrespect.") {
					getMode = 0;
					wordTracker = 0;
				}
				break;
		}
		
		return rng_name;
	}
}