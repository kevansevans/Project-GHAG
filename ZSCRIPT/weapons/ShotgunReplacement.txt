Class GHAGShotgun : Weapon
{

	mixin IcePunch;

	default
	{
		Weapon.SlotNumber 3;
		Weapon.AmmoType1 "Shell";
		Weapon.AmmoType2 "Shell";
		+Weapon.Ammo_Optional;
		+WEAPON.ALT_AMMO_OPTIONAL;
		Tag "1912 Shotgun";
	}
	
	bool batMode;
	
	int getShotgunCount()
	{
		return owner.countInv('GHAGShotgunOverlay') * (owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
	}
	
	override void BeginPlay()
	{
		self.AmmoUse1 = 1;
		self.AmmoUse2 = countInv('GHAGShotgunOverlay');
		self.batMode = False;
		
		super.beginPlay();
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	override void tick()
	{
		Super.tick();
		
		setTag(Cvar.findCvar("ShotgunName").getString());
	}
	
	int layer;
	int meleeframes;
	
	States
	{
		Select :
			TNT1 A 0
			{
				if (invoker.ammo1.amount == 0 || invoker.ammo2.amount == 0) invoker.batmode = true;
				else invoker.batmode = false;
				
				if (!invoker.batmode) return resolveState("Select.Norm");
				else if (invoker.batmode) return resolveState("Select.Batgun");
				return resolveState(null);
			}
			Loop;
		Select.Norm :
			HAND A 1 {
				A_Raise();
				A_OverlayShotguns();
			}
			Loop;
		Select.Batgun :
			GSHT I 1 {
				A_Raise();
				A_OverlayShotguns();
			}
			Loop;
		Deselect :
			TNT1 A 0
			{
				if (!invoker.batmode) return resolveState("Deselect.Norm");
				else if (invoker.batmode) return resolveState("Deselect.Batgun");
				return resolveState(null);
			}
			Loop;
		Deselect.Norm :
			HAND A 1 {
				A_Lower();
				A_OverlayShotguns();
			}
			Loop;
		Deselect.Batgun :
			GSHT I 1 {
				A_Lower();
				A_OverlayShotguns();
			}
			Loop;
		Ready :
			TNT1 A 0
			{
				if (invoker.owner.CountInv("IcePunchItem") > 0)
				{
					return resolveState("IcePunchAttack");
				}
				if (!invoker.batmode) return resolveState("Ready.Standard");
				else if (invoker.batmode) return resolveState("Ready.Baseball");
				return resolveState(null);
			}
			Loop;
		Ready.Standard :
			HAND A 1 {
				Invoker.AmmoUse2 = invoker.getShotgunCount();
				A_WeaponReady(WRF_ALLOWRELOAD);
				A_OverlayShotguns();
			}
			goto Ready;
		Ready.Baseball :
			GSHT I 1 {
				A_WeaponReady(WRF_ALLOWRELOAD);
				A_OverlayShotguns();
			}
			goto Ready;
		Fire :
			TNT1 A 0
			{
				if (countinv('shell') <= 0 && !invoker.batmode) return resolveState("reload");
				if (!invoker.batmode && countinv('shell') > 0) return resolveState("Fire.Gun");
				else if (invoker.batmode) return resolveState("Fire.Swing");
				return resolveState(null);
			}
		Fire.Gun :
			TNT1 A 0 
			{
				return resolveState(null);
			}
			HAND A 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
				A_OverlayShotguns();
			}
			TNT1 A 0
			{
				//Does not work on next state for some reason...?
				if (Cvar.findCvar("sv_infiniteammo").GetBool() == false) A_GiveInventory("Shell");
			}
			HAND B 2 Bright {
				A_FireBullets(4, 4, 10, 5, "BulletPuff");
				int pellets = floor(14 * Gardevoir(Self).GetRageModifier()) * (invoker.owner.CountInv("PowerWeaponLevel2") >= 1 ? 2 : 1);
				A_FireBullets(4, 4, pellets, 5, "GHAGPsychicPuff");
				A_StartSound("weapons/shotgf", CHAN_AUTO);
				A_SetTics(Gardevoir(self).GetTicModifier(2));
				bool powered = invoker.owner.CountInv("PowerWeaponLevel2") >= 1;
				A_OverlayShotguns(true, false, powered);
			}
			HAND CCDDD 1 Bright;
			HAND E 3 A_SetTics(Gardevoir(self).GetTicModifier(3));
			HAND FGAAAAA 3 A_SetTics(Gardevoir(self).GetTicModifier(3));
			HAND A 7 {
				if (invoker.ammo1.amount == 0) {
						return resolveState("Reload");
				}
				A_ReFire();
				return resolveState(null);
			}
			Goto Ready;
		Fire.Swing :
			TNT1 A 0 A_OverlayPivot(0, 0.75, 0.75);
			GSHT IIII 1 {
				A_OverlayRotate(0, 25, WOF_ADD);
			}
			GSHT I 0 {
				FTranslatedLineTarget t;
				double ang = angle + Random2() * (5.625 / 256);
				double pitch = AimLineAttack(ang, 64, null, 0., ALF_CHECK3D);
				int damage = invoker.owner.CountInv("PowerWeaponLevel2") >= 1 ? 256 : 128;
				LineAttack(ang, 64, pitch, damage, 'Melee', "BulletPuff", LAF_ISMELEEATTACK, t);
				A_StartSound("skeleton/swing", CHAN_WEAPON);
				if (t.linetarget)
				{
					Actor target = t.linetarget;
					float rage = Gardevoir(players[consoleplayer].mo).getRageModifier();
					A_StartSound("fists/LPUNCH", CHAN_WEAPON);
					ShottyThwackBlastActor(target, 64 + (64 * rage), 16 + (16 * rage), "", true);
					if (target.health > 0) target.setStateLabel("Pain");
					if (invoker.owner.CountInv("PowerWeaponLevel2") >= 1) A_Quake(10, 3, 0, 10);
				}
			}
			GSHT IIII 4 
			{
				A_OverlayRotate(0, -25, WOF_ADD);
				A_SetTics(Gardevoir(self).GetTicModifier(4));
			}
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (invoker.batmode == true)
				{
					return resolveState("AltFire.Batmode");
				}
				if (invoker.ammo2.amount == 0) return resolveState("ready");
				invoker.AmmoUse2 = Min(invoker.getShotgunCount(), 3);
				return resolveState(null);
			}
			HAND A 3 {
				A_SetTics(Gardevoir(self).GetTicModifier(3));
				A_OverlayShotguns();
			}
			HAND B 1 Bright {
				A_FireBullets(6, 6, 15 * invoker.getShotgunCount() * Gardevoir(Self).GetRageModifier(), 5, "GHAGPsychicPuff");
				if (Cvar.findCvar("sv_infiniteammo").GetBool() == false) A_TakeInventory("Shell", Min(invoker.getShotgunCount(), 3));
				A_StartSound("weapons/shotgf", CHAN_AUTO);
				A_SetTics(Gardevoir(self).GetTicModifier(2));
				A_OverlayShotguns(true, true);
			}
			HAND CCDDD 1 Bright;
			HAND E 2;
			HAND FGAAAAA 3;
			HAND A 7 {
				if (invoker.ammo1.amount <= 0) {
						return resolveState("Reload");
				}
				A_ReFire();
				return resolveState(null);
			}
			Goto Ready;
		AltFire.Batmode : 
			TNT1 A 0
			{
				if (invoker.ammo2.amount == 0 || invoker.getShotgunCount() <= 1) return resolveState("Fire.Swing");
				return resolveState(null);
			}
			GSHT I 3 A_OverlayShotguns();
			GSHT I 2 Bright {
				invoker.AmmoUse2 = 1;
				if (CountInv("Shell") != 0) A_GiveInventory("Shell");
				A_FireBullets(4, 4, 10, 5, "BulletPuff");
				A_FireBullets(4, 4, floor(14 * Gardevoir(Self).GetRageModifier()), 5, "GHAGPsychicPuff");
				A_StartSound("weapons/shotgf", CHAN_AUTO);
				A_OverlayShotguns(true);
			}
			GSHT IIIII 1 Bright;
			GSHT I 24;
			GSHT I 7 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 7
			{
				A_OverlayShotgunBatGrab();
				invoker.batmode = !invoker.batmode;
			}
			goto Ready;
		IcePunchAttack:
			#### A 0 A_IcePunchPrecalc();
			#### AAA 2 {
				A_OverlayIcePunch();
			}
			#### AA 2
			{
				A_OverlayIcePunch();
				A_IcePunch();
			}
			#### A 1
			{
				A_ClearOverlays(2, 2);
				invoker.owner.TakeInventory("IcePunchItem", 1);
			}
			goto Ready;
		IcePunch.Overlay:
			IPUN AB 3 A_SetTics(Gardevoir(self).GetTicModifier(3));
			IPUN C 4;
			IPUN DEF 4 A_SetTics(Gardevoir(self).GetTicModifier(4));
			stop;
		Grab.Overlay.Enable :
			GSHT H 4;
			GSHT I 3;
			stop;
		Grab.Overlay.Disable :
			GSHT I 3;
			GSHT H 4;
			stop;
		Select.Overlay:
		Deselect.Overlay:
		Ready.Overlay:
			GSHT A 999;
			stop;
		Fire.Overlay:
			GSHT G 5 Bright
			{
				for (int i = 0; i < invoker.getShotgunCount(); i++)
				{
					int layer = -1 * (i + 1);
					A_OverlayPivot(layer, 53, 0, WOF_ADD | WOF_KEEPY);
				}
			}
		Pump.Overlay :
			GSHT A 3 A_SetTics(Gardevoir(self).GetTicModifier(3));
			GSHT A 2 A_SetTics(Gardevoir(self).GetTicModifier(2));
			GSHT A 5 A_SetTics(Gardevoir(self).GetTicModifier(5));
			TNT1 A 0 A_StartSound("weapons/shotpm", CHAN_WEAPON);
			GSHT C 5 A_SetTics(Gardevoir(self).GetTicModifier(5));
			GSHT D 4 A_SetTics(Gardevoir(self).GetTicModifier(4));
			GSHT E 5 
			{
				A_SetTics(Gardevoir(self).GetTicModifier(5));
				A_StartSound("weapons/shotpl", CHAN_WEAPON);
			}
			GSHT A 999;
			stop;
		AltFire.Overlay:
			GSHT G 5 
			{
				for (int i = 0; i < invoker.getShotgunCount(); i++)
				{
					int layer = -1 * (i + 1);
					A_OverlayPivot(layer, 2, 0, WOF_ADD | WOF_KEEPY);
				}
			}
		AltPump.Overlay :
			GSHT A 3;
			GSHT A 2;
			GSHT A 5;
			TNT1 A 0 A_StartSound("weapons/shotpm", CHAN_WEAPON);
			GSHT C 5;
			GSHT D 4;
			GSHT E 5 A_StartSound("weapons/shotpl", CHAN_WEAPON);
	}
	
	Action void A_OverlayShotgunBatGrab()
	{
		if (!invoker.batmode) A_Overlay(-1, "Grab.Overlay.Enable", false);
		if (invoker.batmode) A_Overlay(-1, "Grab.Overlay.Disable", false);
		A_OverlayFlags(-1, PSPF_PIVOTPERCENT, true);
		A_OverlayPivot(-1, 0.5, 0.5);
		int degree = int(2 * invoker.batmode ? -1 : 1);
		A_OverlayRotate(-1, degree, WOF_ADD | WOF_INTERPOLATE);
		if (!invoker.batmode) invoker.meleeframes++;
		else invoker.meleeframes--;
	}
	
	Action void A_OverlayShotguns(bool rollForFire = false, bool altFire = false, bool powered = false)
	{
		int rng;
		int rng2;
		
		if (invoker.batmode && rollForFire) {
			rng = random(1, invoker.getShotgunCount() - 1);
			rng2 = rng;
			while (powered && rng2 == rng)
			{
				rng2 = random(1, invoker.getShotgunCount() - 1);
			}
		} else {
			rng = random(0, invoker.getShotgunCount() - 1);
			rng2 = rng;
			while (powered && rng2 == rng)
			{
				rng2 = random(0, invoker.getShotgunCount() - 1);
			}
		}
		for (int i = 0; i < invoker.getShotgunCount(); i++)
		{
			if (invoker.batmode && i == 0) {
				continue;
			}
			
			int layer = invoker.layer = -1 * (i + 1);
			
			if (rollForFire && (i == rng || i == rng2) && !altFire) {
				A_Overlay(layer, "Fire.Overlay", false);
			}
			else if (altFire) A_Overlay(layer, "AltFire.Overlay", false);
			else A_Overlay(layer, "Ready.Overlay", false);
			
			A_OverlayFlags(layer, PSPF_ADDBOB | PSPF_PIVOTPERCENT, false);
			if ((i + 1) % 2 == 0) A_OverlayFlags(layer, PSPF_FLIP | PSPF_MIRROR, true);
			A_OverlayOffset(layer, sin(gametic + (63 * i)) + (55 * (i / 2)) + 30, cos(gametic - (234 * i)) - (18 * (i / 2)), WOF_INTERPOLATE);
			
			if (invoker.owner.countInv("PowerWeaponLevel2") >= 1)
			{
				int realCount = int(invoker.getShotgunCount() / 2);
				if (i + 1 > realcount)
				{
					A_OverlayFlags(layer, PSPF_RENDERSTYLE, true);
					A_OverlayRenderstyle(layer, STYLE_SoulTrans);
					A_OverlayAlpha (layer, 0.25);
				}
			} 
		}
		
		int layerStart = invoker.getShotgunCount() * -1;
		A_ClearOverlays(-10, layerStart - 1);
	}
	
	Action void ShottyThwackBlastActor (Actor victim, double strength, double speed, Class<Actor> blasteffect, bool dontdamage)
	{
		if (!victim.SpecialBlastHandling (self, strength))
		{
			return;
		}

		double ang = AngleTo(victim);
		Vector2 move = AngleToVector(ang, speed);
		victim.Vel.XY = move;

		// Spawn blast puff
		ang -= 180.;
		Vector3 spawnpos = victim.Vec3Offset(
			(victim.radius + 1) * cos(ang),
			(victim.radius + 1) * sin(ang),
			(victim.Height / 2) - victim.Floorclip);
		Actor mo = blasteffect? Spawn (blasteffect, spawnpos, ALLOW_REPLACE) : null;
		if (mo)
		{
			mo.Vel.XY = victim.Vel.XY;
		}
		if (victim.bMissile)
		{
			// [RH] Floor and ceiling huggers should not be blasted vertically.
			if (!victim.bFloorHugger && !victim.bCeilingHugger)
			{
				victim.Vel.Z = 8;
				if (mo != null) mo.Vel.Z = 8;
			}
		}
		else
		{
			victim.Vel.Z = 1000. / victim.Mass;
		}
		if (victim.player)
		{
			// Players handled automatically
		}
		else if (!dontdamage)
		{
			victim.bBlasted = true;
		}
		if (victim.bTouchy)
		{ // Touchy objects die when blasted
			victim.bArmed = false; // Disarm
			victim.DamageMobj(self, self, victim.health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
		}
	}
}

Class GHAGPsychicPuff : BulletPuff
{
	Default
	{
		Translation "96:111=250:254";
	}
}

class GHAGShotgunOverlay : Ammo
{
	default
	{
		Inventory.MaxAmount 4;
		Inventory.pickupMessage "Seized an extra shotgun!";
	}
	
	override void beginplay()
	{
		super.beginPlay();
		
		if (GameInfo.GameType == 2) Self.MaxAmount = 2;
	}
}