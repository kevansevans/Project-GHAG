Class GHAGPlasmaRifle : PlasmaRifle replaces PlasmaRifle
{
	default {
		Weapon.SlotNumber 6;
		Tag "Generic Energy Weapon";
	}
	
	override void DoEffect()
	{
		players[consoleplayer].WeaponState |= WF_WEAPONBOBBING;
		super.DoEffect();
	}
	
	States
	{
		Select:
			HAND A 1 {	
				A_Raise();
				A_Overlay(-1, "Plasma.Overlay", true);
				A_OverlayFlags(-1, PSPF_ADDBOB, false);
				A_OverlayOffset(-1, sin(gametic * 2) / 13, cos(gametic * 2) / 11, WOF_ADD | WOF_INTERPOLATE);
			}
			loop;
		Deselect:
			HAND A 1 {
				A_Lower();
				A_Overlay(-1, "Plasma.Overlay", true);
				A_OverlayFlags(-1, PSPF_ADDBOB, false);
				A_OverlayOffset(-1, sin(gametic * 2) / 13, cos(gametic * 2) / 11, WOF_ADD | WOF_INTERPOLATE);
			}
			loop;
		Ready:
			HAND A 1 {
				A_WeaponReady();
				A_Overlay(-1, "Plasma.Overlay", true);
				A_OverlayFlags(-1, PSPF_ADDBOB, false);
				A_OverlayOffset(-1, sin(gametic * 2) / 13, cos(gametic * 2) / 11, WOF_ADD | WOF_INTERPOLATE);
			}
			loop;
		Fire:
			HAND A 1 A_PsychicPlasma();
			HAND BC 1;
			HAND DE 1 A_Refire();
			Goto Ready;
		Plasma.Overlay :
			PLSM ABCDE 1;
			Loop;
	}
	
	Action void A_PsychicPlasma() {
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		let _locPlasma = PsychicPlasma(SpawnPlayerMissile("PsychicPlasma"));
	}
}

Class PsychicPlasma : PlasmaBall replaces PlasmaBall
{

	bool overdrive;

	default {
		+ScreenSeeker;
		+ForceRadiusDmg;
	}
	
	override void BeginPlay()
	{
		int rng = random(1, 100);
		double modifier = Gardevoir(players[consoleplayer].mo).getRageModifier();
		if (rng <= 100 * modifier)
		{
			overdrive = true;
			A_SetScale(1.5, 1.5);
			A_SetTranslation('PlasmaOverdrive');
		}
	}

	States
	{
		Spawn:
			PLSS AB 6 Bright {
			
				double modifier = Gardevoir(players[consoleplayer].mo).getRageModifier();
			
				A_SeekerMissile(5, (modifier * 100), SMF_LOOK, 300 * modifier);
				A_SetTics(6 * (1 - modifier) < 1 ? 1 : 6 * (1 - modifier));
				if (tracer) {
					A_Weave(3, 3, modifier, modifier);
					if (self.Pos.z <= tracer.Pos.z + 5) {
						SetZ(self.Pos.z + 4 + (4 * modifier));
					}
					if (self.Pos.z >= tracer.Pos.z + tracer.height) {
						SetZ(self.Pos.z - (4 + (4 * modifier)));
					}
				}
				
			}
			Loop;
		Death:
			TNT1 A 0 A_JumpIf(overdrive, 'Death.OverDrive');
			Goto Super::Death;
		Death.Overdrive:
			PLSE A 4 Bright {
				double modifier = Gardevoir(players[consoleplayer].mo).getRageModifier();
				A_PlasmaBlast(BF_DONTWARN | BF_AFFECTBOSSES | BF_NOIMPACTDAMAGE, 255 * modifier, 255 * modifier, 20 * modifier);
				A_SetScale(2.5, 2.5);
			}
			PLSE BCDE 4 Bright;
			stop;
	}
	
	action void PlasmaBlastActor (Actor victim, double strength, double speed, Class<Actor> blasteffect, bool dontdamage)
	{
		if (!victim.SpecialBlastHandling (self, strength))
		{
			return;
		}

		double ang = AngleTo(victim);
		Vector2 move = AngleToVector(ang, speed);
		victim.Vel.XY = move;

		// Spawn blast puff
		ang -= 180.;
		Vector3 spawnpos = victim.Vec3Offset(
			(victim.radius + 1) * cos(ang),
			(victim.radius + 1) * sin(ang),
			(victim.Height / 2) - victim.Floorclip);
		Actor mo = blasteffect? Spawn (blasteffect, spawnpos, ALLOW_REPLACE) : null;
		if (mo)
		{
			mo.Vel.XY = victim.Vel.XY;
		}
		if (victim.bMissile)
		{
			// [RH] Floor and ceiling huggers should not be blasted vertically.
			if (!victim.bFloorHugger && !victim.bCeilingHugger)
			{
				victim.Vel.Z = 8;
				if (mo != null) mo.Vel.Z = 8;
			}
		}
		else
		{
			victim.Vel.Z = 1000. / victim.Mass;
		}
		if (victim.player)
		{
			// Players handled automatically
		}
		else if (!dontdamage)
		{
			victim.bBlasted = true;
		}
		if (victim.bTouchy)
		{ // Touchy objects die when blasted
			victim.bArmed = false; // Disarm
			victim.DamageMobj(self, self, victim.health, 'Melee', DMG_FORCED|DMG_EXPLOSION);
		} else {
			victim.DamageMobj(self, Gardevoir(players[consoleplayer].mo), 32 * (255 / Distance3D(victim)), "Plasma");
			if (victim.health > 0) victim.SetStateLabel('Pain');
		}
	}

	action void A_PlasmaBlast(int blastflags = 0, double strength = 255, double radius = 255, double speed = 20, class<Actor> blasteffect = "BlastEffect", sound blastsound = "BlastRadius")
	{
		A_StartSound (blastsound, CHAN_AUTO);

		if (!(blastflags & BF_DONTWARN))
		{
			SoundAlert (self);
		}
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while ( (mo = Actor(it.Next ())) )
		{
			//ignore player
			if (Gardevoir(mo)) continue;
			if (mo == self || (mo.bBoss && !(blastflags & BF_AFFECTBOSSES)) || mo.bDormant || mo.bDontBlast)
			{ // Not a valid monster: originator, boss, dormant, or otherwise protected
				continue;
			}
			if (mo.bIceCorpse || mo.bCanBlast)
			{
				// Let these special cases go
			}
			else if (mo.bIsMonster && mo.health <= 0)
			{
				continue;
			}
			else if (!mo.player && !mo.bMissile && !mo.bIsMonster && !mo.bCanBlast && !mo.bTouchy && !mo.bVulnerable)
			{	// Must be monster, player, missile, touchy or vulnerable
				continue;
			}
			if (Distance2D(mo) > radius)
			{ // Out of range
				continue;
			}
			if (mo.CurSector.PortalGroup != CurSector.PortalGroup && !CheckSight(mo))
			{
				// in another region and cannot be seen.
				continue;
			}
			if ((blastflags & 16) && !isVisible(mo, true)) 
			{
				//only blast if target can bee seen by calling actor
				continue;
			}
			PlasmaBlastActor(mo, strength, speed, blasteffect, !!(blastflags & BF_NOIMPACTDAMAGE));
		}
	}

}

Class GHAGBFG : CellPack replaces BFG9000
{
	Default
	{
		Inventory.Amount 40;
	}
}